export interface Question {
  id: string;
  question: string;
  answer: string;
  difficulty: 'easy' | 'medium' | 'hard';
}

export type ProgressStatus = 'learning' | 'review' | 'known';

export interface Technology {
  id: string;
  name: string;
  questions: Question[];
}

export const questionsData: Technology[] = [
  {
    id: "html",
    name: "HTML",
    questions: [
      {
        id: "html-1",
        question: "Что такое HTML5?",
        answer: "HTML5 — это последняя версия языка разметки гипертекста, используемая для создания веб-страниц и приложений.<br/>Основные особенности:<br/>• Новые семантические элементы (header, footer, nav, article)<br/>• Поддержка мультимедиа без плагинов (audio, video)<br/>• Canvas и SVG для графики<br/>• Улучшенные формы с новыми типами input<br/>• LocalStorage и SessionStorage для хранения данных<br/>• Геолокация и другие API",
        difficulty: "easy"
      },
      {
        id: "html-2",
        question: "Какова базовая структура HTML документа?",
        answer: "Базовая структура HTML документа включает:<br/>• &lt;!DOCTYPE html&gt; — объявление типа документа<br/>• &lt;html&gt; — корневой элемент<br/>• &lt;head&gt; — метаданные документа (title, meta, link)<br/>• &lt;body&gt; — видимое содержимое страницы<br/><br/>Пример:<br/>&lt;!DOCTYPE html&gt;<br/>&lt;html lang=\"ru\"&gt;<br/>&nbsp;&nbsp;&lt;head&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Заголовок&lt;/title&gt;<br/>&nbsp;&nbsp;&lt;/head&gt;<br/>&nbsp;&nbsp;&lt;body&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- Контент --&gt;<br/>&nbsp;&nbsp;&lt;/body&gt;<br/>&lt;/html&gt;",
        difficulty: "easy"
      },
      {
        id: "html-3",
        question: "Для чего используется DOCTYPE?",
        answer: "DOCTYPE — это инструкция браузеру о версии HTML, в которой написан документ.<br/>• Определяет режим рендеринга (стандартный или совместимости)<br/>• В HTML5 используется простая форма: &lt;!DOCTYPE html&gt;<br/>• Должен быть первой строкой в документе<br/>• Без DOCTYPE браузер может перейти в режим совместимости (quirks mode)",
        difficulty: "easy"
      },
      {
        id: "html-4",
        question: "В чём разница между тегами <head> и <body>?",
        answer: "&lt;head&gt; содержит метаинформацию:<br/>• Заголовок страницы (title)<br/>• Мета-теги (charset, viewport, description)<br/>• Подключение CSS и JavaScript<br/>• Не отображается на странице<br/><br/>&lt;body&gt; содержит видимый контент:<br/>• Текст, изображения, видео<br/>• Все элементы интерфейса<br/>• Отображается пользователю",
        difficulty: "easy"
      },
      {
        id: "html-5",
        question: "Какие важные мета-теги существуют?",
        answer: "Основные мета-теги:<br/>• &lt;meta charset=\"UTF-8\"&gt; — кодировка<br/>• &lt;meta name=\"viewport\" content=\"width=device-width\"&gt; — адаптивность<br/>• &lt;meta name=\"description\" content=\"...\"&gt; — описание для SEO<br/>• &lt;meta name=\"keywords\" content=\"...\"&gt; — ключевые слова (устарел)<br/>• &lt;meta name=\"author\" content=\"...\"&gt; — автор<br/>• &lt;meta property=\"og:title\"&gt; — Open Graph для соцсетей",
        difficulty: "easy"
      },
      {
        id: "html-6",
        question: "Как подключить CSS к HTML?",
        answer: "Три способа подключения CSS:<br/><br/>1. Внешний файл (рекомендуется):<br/>&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;<br/><br/>2. Внутренние стили:<br/>&lt;style&gt;<br/>&nbsp;&nbsp;p { color: red; }<br/>&lt;/style&gt;<br/><br/>3. Inline стили:<br/>&lt;p style=\"color: red;\"&gt;Текст&lt;/p&gt;",
        difficulty: "easy"
      },
      {
        id: "html-7",
        question: "Как подключить JavaScript к HTML?",
        answer: "Способы подключения JavaScript:<br/><br/>1. Внешний файл:<br/>&lt;script src=\"script.js\"&gt;&lt;/script&gt;<br/><br/>2. Встроенный скрипт:<br/>&lt;script&gt;<br/>&nbsp;&nbsp;console.log('Hello');<br/>&lt;/script&gt;<br/><br/>Рекомендации:<br/>• Размещать перед &lt;/body&gt; для быстрой загрузки<br/>• Или использовать атрибуты defer/async в &lt;head&gt;",
        difficulty: "easy"
      },
      {
        id: "html-8",
        question: "Как добавить комментарий в HTML?",
        answer: "HTML комментарии:<br/>&lt;!-- Это комментарий --&gt;<br/><br/>Особенности:<br/>• Не отображаются на странице<br/>• Видны в исходном коде<br/>• Используются для пояснений и временного отключения кода<br/>• Могут быть многострочными",
        difficulty: "easy"
      },
      {
        id: "html-9",
        question: "Для чего нужен атрибут lang?",
        answer: "Атрибут lang указывает язык содержимого страницы:<br/>&lt;html lang=\"ru\"&gt;<br/><br/>Преимущества:<br/>• Помогает поисковым системам<br/>• Улучшает доступность (screen readers)<br/>• Браузер может предложить перевод<br/>• Правильная расстановка переносов<br/><br/>Примеры: ru, en, en-US, ru-RU",
        difficulty: "easy"
      },
      {
        id: "html-10",
        question: "Что такое data-атрибуты?",
        answer: "Data-атрибуты позволяют хранить пользовательские данные в HTML элементах:<br/>&lt;div data-user-id=\"123\" data-role=\"admin\"&gt;&lt;/div&gt;<br/><br/>Доступ через JavaScript:<br/>element.dataset.userId // \"123\"<br/>element.dataset.role // \"admin\"<br/><br/>Преимущества:<br/>• Валидный HTML<br/>• Легкий доступ через dataset API<br/>• Не влияют на отображение",
        difficulty: "easy"
      },
      {
        id: "html-11",
        question: "В чём разница между <b> и <strong>?",
        answer: "&lt;b&gt; — визуальное выделение жирным:<br/>• Только стилистическое значение<br/>• Не имеет семантического смысла<br/><br/>&lt;strong&gt; — семантическое выделение важности:<br/>• Указывает на важность текста<br/>• Лучше для SEO и доступности<br/>• Screen readers выделяют интонацией<br/><br/>Рекомендуется использовать &lt;strong&gt;",
        difficulty: "easy"
      },
      {
        id: "html-12",
        question: "В чём разница между <em> и <i>?",
        answer: "&lt;em&gt; — семантический акцент:<br/>• Подчеркивает смысловое ударение<br/>• Читается с изменением интонации<br/>• Пример: Это &lt;em&gt;очень&lt;/em&gt; важно<br/><br/>&lt;i&gt; — визуальный курсив:<br/>• Только стилистическое оформление<br/>• Используется для терминов, названий<br/>• Пример: &lt;i&gt;Lorem ipsum&lt;/i&gt;<br/><br/>Предпочтительнее использовать &lt;em&gt;",
        difficulty: "easy"
      },
      {
        id: "html-13",
        question: "Что делают теги <small>, <s> и <mark>?",
        answer: "&lt;small&gt; — мелкий шрифт:<br/>• Для менее важного текста<br/>• Сноски, копирайты, дисклеймеры<br/><br/>&lt;s&gt; — зачеркнутый текст:<br/>• Неактуальная информация<br/>• Старые цены<br/><br/>&lt;mark&gt; — выделение маркером:<br/>• Подсветка важного текста<br/>• Результаты поиска<br/>• Визуально как желтый маркер",
        difficulty: "easy"
      },
      {
        id: "html-14",
        question: "Что такое семантический HTML?",
        answer: "Семантический HTML использует теги по их смысловому назначению.<br/><br/>Семантические теги:<br/>• &lt;header&gt;, &lt;footer&gt;, &lt;nav&gt;<br/>• &lt;main&gt;, &lt;article&gt;, &lt;section&gt;<br/>• &lt;aside&gt;, &lt;figure&gt;, &lt;figcaption&gt;<br/><br/>Преимущества:<br/>• Улучшает SEO<br/>• Повышает доступность<br/>• Упрощает поддержку кода<br/>• Помогает поисковым роботам",
        difficulty: "easy"
      },
      {
        id: "html-15",
        question: "Как создать параграфы и переносы строк?",
        answer: "Параграф — тег &lt;p&gt;:<br/>&lt;p&gt;Это параграф текста&lt;/p&gt;<br/>• Автоматические отступы сверху/снизу<br/>• Блочный элемент<br/><br/>Перенос строки — тег &lt;br&gt;:<br/>Первая строка&lt;br&gt;Вторая строка<br/>• Одиночный тег без закрывающего<br/>• Принудительный перенос<br/>• Не создает отступов",
        difficulty: "easy"
      },
      {
        id: "html-16",
        question: "Какие новые типы input появились в HTML5?",
        answer: "Новые типы input в HTML5:<br/>• email — проверка email<br/>• url — проверка URL<br/>• tel — телефонные номера<br/>• number — числовые значения<br/>• range — ползунок<br/>• date — выбор даты<br/>• time — выбор времени<br/>• color — палитра цветов<br/>• search — поисковое поле<br/><br/>Преимущества: встроенная валидация и мобильные клавиатуры",
        difficulty: "medium"
      },
      {
        id: "html-17",
        question: "Как работает элемент <canvas>?",
        answer: "&lt;canvas&gt; — область для рисования графики через JavaScript.<br/><br/>Создание:<br/>&lt;canvas id=\"myCanvas\" width=\"200\" height=\"100\"&gt;&lt;/canvas&gt;<br/><br/>Использование:<br/>const ctx = canvas.getContext('2d');<br/>ctx.fillRect(0, 0, 150, 75);<br/><br/>Применение:<br/>• Графики и диаграммы<br/>• Игры<br/>• Обработка изображений<br/>• Анимации",
        difficulty: "medium"
      },
      {
        id: "html-18",
        question: "В чём разница между localStorage и sessionStorage?",
        answer: "localStorage:<br/>• Хранит данные без срока истечения<br/>• Данные сохраняются после закрытия браузера<br/>• Доступны во всех вкладках домена<br/>• Объем: ~5-10 MB<br/><br/>sessionStorage:<br/>• Хранит данные одной сессии<br/>• Удаляется при закрытии вкладки<br/>• Доступны только в текущей вкладке<br/>• Объем: ~5-10 MB<br/><br/>Методы одинаковые: setItem, getItem, removeItem",
        difficulty: "medium"
      },
      {
        id: "html-19",
        question: "Как использовать аудио и видео в HTML5?",
        answer: "Элемент &lt;audio&gt;:<br/>&lt;audio controls&gt;<br/>&nbsp;&nbsp;&lt;source src=\"audio.mp3\" type=\"audio/mpeg\"&gt;<br/>&lt;/audio&gt;<br/><br/>Элемент &lt;video&gt;:<br/>&lt;video controls width=\"320\" poster=\"preview.jpg\"&gt;<br/>&nbsp;&nbsp;&lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;<br/>&lt;/video&gt;<br/><br/>Атрибуты:<br/>• controls — панель управления<br/>• autoplay — автовоспроизведение<br/>• loop — зацикливание<br/>• muted — без звука",
        difficulty: "medium"
      },
      {
        id: "html-20",
        question: "Что такое SVG и как его использовать?",
        answer: "SVG — масштабируемая векторная графика.<br/><br/>Способы использования:<br/>1. Встроенный SVG:<br/>&lt;svg&gt;&lt;circle cx=\"50\" cy=\"50\" r=\"40\"/&gt;&lt;/svg&gt;<br/><br/>2. Через img:<br/>&lt;img src=\"icon.svg\"&gt;<br/><br/>3. В CSS:<br/>background-image: url('icon.svg');<br/><br/>Преимущества:<br/>• Масштабируется без потери качества<br/>• Малый размер файлов<br/>• Можно стилизовать через CSS",
        difficulty: "medium"
      },
      {
        id: "html-21",
        question: "Что такое атрибут defer и async у тега script?",
        answer: "async:<br/>• Скрипт загружается параллельно<br/>• Выполняется сразу после загрузки<br/>• Прерывает парсинг HTML<br/>• Порядок выполнения не гарантирован<br/><br/>defer:<br/>• Скрипт загружается параллельно<br/>• Выполняется после парсинга DOM<br/>• Не блокирует рендеринг<br/>• Сохраняет порядок выполнения<br/><br/>Без атрибутов: блокирует парсинг HTML",
        difficulty: "medium"
      },
      {
        id: "html-22",
        question: "Как сделать форму доступной (accessible)?",
        answer: "Правила доступных форм:<br/>• Использовать &lt;label&gt; для всех input<br/>• Атрибут for должен совпадать с id input<br/>• Группировать связанные поля через &lt;fieldset&gt;<br/>• Добавлять aria-label для иконок<br/>• Указывать required для обязательных полей<br/>• Использовать правильные типы input<br/>• Добавлять подсказки через placeholder<br/>• Показывать понятные сообщения об ошибках",
        difficulty: "medium"
      },
      {
        id: "html-23",
        question: "Что такое Web Workers?",
        answer: "Web Workers позволяют выполнять JavaScript в фоновом потоке.<br/><br/>Особенности:<br/>• Не блокируют главный поток<br/>• Не имеют доступа к DOM<br/>• Общаются через postMessage<br/>• Подходят для тяжелых вычислений<br/><br/>Создание:<br/>const worker = new Worker('worker.js');<br/>worker.postMessage({cmd: 'start'});<br/>worker.onmessage = (e) =&gt; console.log(e.data);",
        difficulty: "hard"
      },
      {
        id: "html-24",
        question: "Что такое Progressive Web Apps (PWA)?",
        answer: "PWA — веб-приложения с нативными возможностями.<br/><br/>Ключевые компоненты:<br/>• Service Workers — офлайн работа<br/>• Web App Manifest — установка на устройство<br/>• HTTPS — обязательная защита<br/><br/>Возможности:<br/>• Работа офлайн<br/>• Push-уведомления<br/>• Установка как приложение<br/>• Доступ к устройству (камера, геолокация)",
        difficulty: "hard"
      },
      {
        id: "html-25",
        question: "Как работает drag and drop в HTML5?",
        answer: "Атрибуты и события Drag & Drop:<br/><br/>Атрибуты:<br/>• draggable=\"true\" — делает элемент перетаскиваемым<br/><br/>События перетаскиваемого элемента:<br/>• dragstart — начало перетаскивания<br/>• drag — процесс перетаскивания<br/>• dragend — конец перетаскивания<br/><br/>События целевого элемента:<br/>• dragenter, dragover — наведение<br/>• drop — отпускание<br/>• dragleave — уход с элемента",
        difficulty: "medium"
      },
      {
        id: "html-26",
        question: "Что такое Content Security Policy (CSP)?",
        answer: "CSP — политика безопасности контента, защищающая от XSS атак.<br/><br/>Настройка через мета-тег:<br/>&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'\"&gt;<br/><br/>Директивы:<br/>• default-src — источники по умолчанию<br/>• script-src — источники скриптов<br/>• style-src — источники стилей<br/>• img-src — источники изображений<br/><br/>Защищает от внедрения вредоносного кода",
        difficulty: "hard"
      },
      {
        id: "html-27",
        question: "Как оптимизировать загрузку изображений?",
        answer: "Методы оптимизации изображений:<br/><br/>1. Атрибут loading=\"lazy\":<br/>&lt;img src=\"image.jpg\" loading=\"lazy\"&gt;<br/><br/>2. Элемент &lt;picture&gt; для адаптивности:<br/>&lt;picture&gt;<br/>&nbsp;&nbsp;&lt;source media=\"(max-width: 600px)\" srcset=\"small.jpg\"&gt;<br/>&nbsp;&nbsp;&lt;img src=\"large.jpg\"&gt;<br/>&lt;/picture&gt;<br/><br/>3. Форматы нового поколения: WebP, AVIF<br/>4. Атрибут srcset для разных разрешений<br/>5. Правильные размеры через width/height",
        difficulty: "medium"
      },
      {
        id: "html-28",
        question: "Что такое Shadow DOM?",
        answer: "Shadow DOM — инкапсулированный DOM и стили компонента.<br/><br/>Особенности:<br/>• Изоляция стилей и скриптов<br/>• Скрытая внутренняя структура<br/>• Используется в Web Components<br/><br/>Создание:<br/>const shadow = element.attachShadow({mode: 'open'});<br/>shadow.innerHTML = '&lt;style&gt;...&lt;/style&gt;&lt;div&gt;...&lt;/div&gt;';<br/><br/>Применение: создание переиспользуемых компонентов",
        difficulty: "hard"
      },
      {
        id: "html-29",
        question: "Какие есть способы валидации форм?",
        answer: "HTML5 валидация:<br/>• required — обязательное поле<br/>• pattern=\"[0-9]{3}\" — регулярное выражение<br/>• min/max — для чисел и дат<br/>• minlength/maxlength — длина текста<br/>• type=\"email/url/tel\" — встроенная проверка<br/><br/>JavaScript валидация:<br/>• element.checkValidity() — проверка<br/>• element.setCustomValidity() — свое сообщение<br/>• novalidate — отключение HTML5 валидации",
        difficulty: "medium"
      },
      {
        id: "html-30",
        question: "Что такое ARIA атрибуты?",
        answer: "ARIA (Accessible Rich Internet Applications) — атрибуты для улучшения доступности.<br/><br/>Основные атрибуты:<br/>• aria-label — текстовая метка<br/>• aria-hidden — скрыть от screen readers<br/>• aria-live — объявление изменений<br/>• aria-describedby — дополнительное описание<br/>• role — роль элемента<br/><br/>Пример:<br/>&lt;button aria-label=\"Закрыть\" aria-pressed=\"false\"&gt;X&lt;/button&gt;",
        difficulty: "medium"
      }
    ]
  },
  {
    id: "css",
    name: "CSS",
    questions: [
      {
        id: "css-1",
        question: "Как работает специфичность в CSS?",
        answer: "Специфичность определяет приоритет применения стилей. Считается по весам: инлайн-стили (1000), ID (100), классы/атрибуты/псевдоклассы (10), элементы/псевдоэлементы (1). Чем выше вес, тем выше приоритет. При равной специфичности побеждает последнее правило в коде.",
        difficulty: "easy"
      },
      {
        id: "css-2",
        question: "Что такое БЭМ (Block-Element-Modifier) методология и какие преимущества она предоставляет?",
        answer: "БЭМ - методология именования классов. Блок - независимый компонент, элемент - часть блока, модификатор - изменение внешнего вида.<br/>Преимущества: четкая структура, масштабируемость, переиспользование кода, легкая поддержка, удобная командная работа.",
        difficulty: "easy"
      },
      {
        id: "css-3",
        question: "Как работают псевдоэлементы ::before и ::after?",
        answer: "::before добавляет виртуальный элемент перед содержимым, ::after - после. Они не существуют в HTML, но можно задать стили и контент через свойство content. Используются для декоративных элементов, иконок, эффектов без изменения разметки.",
        difficulty: "easy"
      },
      {
        id: "css-4",
        question: "Что такое Flexbox и какие основные свойства Flexbox контейнера и элементов?",
        answer: "Flexbox - технология для создания гибких макетов.<br/>Свойства контейнера: display: flex, flex-direction, flex-wrap, justify-content, align-items, align-content.<br/>Свойства элементов: flex-grow, flex-shrink, flex-basis, flex, align-self.",
        difficulty: "easy"
      },
      {
        id: "css-5",
        question: "Как работает система сеток в CSS Grid?",
        answer: "CSS Grid создает двумерные сетки. Контейнер определяется через display: grid, затем задается структура через grid-template-rows и grid-template-columns. Элементы размещаются с помощью grid-row и grid-column. Позволяет создавать сложные макеты без float.",
        difficulty: "easy"
      },
      {
        id: "css-6",
        question: "Каким образом можно создать анимацию с использованием CSS?",
        answer: "С помощью @keyframes и свойства animation. Определяете ключевые кадры с нужными стилями, затем применяете анимацию к элементу, указывая имя, длительность и функцию времени. Можно зациклить через animation-iteration-count: infinite.",
        difficulty: "easy"
      },
      {
        id: "css-7",
        question: "Что такое CSS-переменные (кастомные свойства) и какие преимущества они предоставляют?",
        answer: "CSS-переменные (--имя) - значения, определяемые один раз и используемые через var(--имя).<br/>Преимущества: удобство изменений в одном месте, переиспользование, легкость создания тем, динамическое изменение через JavaScript, улучшение читаемости кода.",
        difficulty: "easy"
      },
      {
        id: "css-8",
        question: "Какие различия между позиционированием relative, absolute и fixed?",
        answer: "relative - элемент остается в потоке, можно сдвинуть относительно его позиции.<br/>absolute - вырывается из потока, позиционируется относительно ближайшего предка с position.<br/>fixed - позиционируется относительно viewport, остается на месте при прокрутке.",
        difficulty: "easy"
      },
      {
        id: "css-9",
        question: "Что такое CSS-гриды и в каких случаях их следует использовать?",
        answer: "CSS Grid - система двумерных сеток для сложных макетов.<br/>Используется для: сложных макетов (дашборды, журнальные статьи), равномерного выравнивания, адаптивного дизайна, переупорядочивания элементов на разных экранах.",
        difficulty: "easy"
      },
      {
        id: "css-10",
        question: "Как работает понятие 'контроль переполнения' (overflow) и его свойства?",
        answer: "overflow управляет отображением контента, не вмещающегося в элемент.<br/>Значения: visible (по умолчанию, контент виден), hidden (скрыт), scroll (всегда полосы прокрутки), auto (полосы только при необходимости). Есть overflow-x и overflow-y для контроля по осям.",
        difficulty: "easy"
      },
      {
        id: "css-11",
        question: "Что такое 'резиновый' и 'адаптивный' дизайн? В чем разница между ними?",
        answer: "Резиновый дизайн - размеры элементов изменяются пропорционально окну браузера.<br/>Адаптивный дизайн - изменяется не только размер, но и структура, расположение элементов с помощью медиазапросов для разных устройств. Адаптивный более гибкий и точно настраивается.",
        difficulty: "easy"
      },
      {
        id: "css-12",
        question: "Как работает свойство z-index и как управлять стеком z-индексов?",
        answer: "z-index управляет порядком наложения элементов с позиционированием (не static). Чем больше значение, тем выше элемент в стеке. Если z-index не указан, порядок определяется последовательностью в HTML. Работает только на позиционированных элементах.",
        difficulty: "easy"
      },
      {
        id: "css-13",
        question: "Что такое 'рендеринговая цепочка' и как CSS влияет на процесс рендеринга в браузере?",
        answer: "Рендеринговая цепочка - последовательность шагов браузера для отображения страницы: получение HTML/CSS, построение DOM и CSSOM, создание рендерингового дерева, вычисление макета, отрисовка.<br/>CSS влияет через: блокирующий рендеринг, размер файлов, сложность селекторов, рефлоу при изменениях.",
        difficulty: "easy"
      },
      {
        id: "css-14",
        question: "Какие преимущества и недостатки использования CSS-препроцессоров, таких как Sass или Less?",
        answer: "Преимущества: переменные, миксины, вложенность, математические операции, импорт файлов, условия и циклы.<br/>Недостатки: дополнительная сложность, этап компиляции, зависимость от инструментов, возможность создания избыточного кода, проблемы совместимости со старыми браузерами.",
        difficulty: "easy"
      },
      {
        id: "css-15",
        question: "Что такое 'рефлов' и 'рефлоу' в контексте CSS и как они влияют на производительность?",
        answer: "Reflow - пересчет геометрии и позиций элементов при изменении размеров/структуры.<br/>Repaint - обновление визуального представления без пересчета геометрии.<br/>Оба процесса требуют ресурсов CPU, замедляют отклик. Для оптимизации: группировать изменения, использовать CSS-трансформации, избегать частых изменений.",
        difficulty: "easy"
      },
      {
        id: "css-16",
        question: "Какие различия между псевдоклассами :nth-child и :nth-of-type?",
        answer: ":nth-child выбирает n-ый дочерний элемент независимо от типа.<br/>:nth-of-type выбирает n-ый элемент конкретного типа среди соседей.<br/>Пример: li:nth-child(2) выберет второй дочерний элемент (даже если это не li), а li:nth-of-type(2) выберет второй li-элемент.",
        difficulty: "easy"
      },
      {
        id: "css-17",
        question: "Что такое 'вендорные префиксы' в CSS и зачем они используются?",
        answer: "Вендорные префиксы (-webkit-, -moz-, -ms-, -o-) - префиксы для экспериментальных CSS-свойств в разных браузерах. Используются для: тестирования новых функций, обеспечения совместимости, поддержки старых браузеров. Сегодня менее актуальны, лучше использовать автопрефиксеры.",
        difficulty: "easy"
      },
      {
        id: "css-18",
        question: "Какие механизмы доступности (accessibility) следует учитывать при разработке с использованием CSS?",
        answer: "Контрастность текста и фона, не только цвет для передачи информации, альтернативный текст для изображений, правильный порядок чтения, видимость фокуса, управление клавиатурой, масштабируемость текста, избегать display: none для важного контента, адаптивный дизайн, тестирование со screen readers.",
        difficulty: "easy"
      },
      {
        id: "css-19",
        question: "Что такое 'критический путь рендеринга' и как CSS может влиять на него?",
        answer: "Критический путь рендеринга - последовательность шагов для первичного отображения контента: загрузка ресурсов, построение DOM и CSSOM, создание рендер-дерева, макет, отрисовка.<br/>CSS влияет через: блокирующий рендеринг, критический CSS (инлайн стили для первого экрана), асинхронную загрузку, минификацию.",
        difficulty: "easy"
      },
      {
        id: "css-20",
        question: "Как работает механизм наследования в CSS? Какие свойства наследуются, а какие нет?",
        answer: "Наследуются: шрифты (font-family, font-size), цвет текста (color), текстовые свойства (line-height, text-align), некоторые свойства списков.<br/>Не наследуются: размеры (width, height), позиционирование, фон, границы, display, visibility. Наследование упрощает стилизацию дочерних элементов.",
        difficulty: "easy"
      },
      {
        id: "css-21",
        question: "Что такое 'кросс-браузерная совместимость' и какие стратегии существуют для обеспечения её в CSS?",
        answer: "Способность сайта работать одинаково в разных браузерах.<br/>Стратегии: соблюдение стандартов, использование reset/normalize.css, тестирование в разных браузерах, вендорные префиксы, прогрессивное улучшение, медиазапросы, инструменты типа BrowserStack, резервные варианты для старых браузеров.",
        difficulty: "easy"
      },
      {
        id: "css-22",
        question: "Какие альтернативы display: none с точки зрения доступности?",
        answer: "visibility: hidden (сохраняет место, но скрывает элемент).<br/>opacity: 0 (элемент прозрачен, но доступен для screen readers).<br/>position: absolute; left: -9999px (перемещает за экран).<br/>aria-hidden='true' (указывает screen readers игнорировать элемент).<br/>display: none полностью удаляет из DOM и недоступен для assistive technologies.",
        difficulty: "easy"
      },
      {
        id: "css-23",
        question: "Что такое 'флексибильность' и 'эластичность' в контексте CSS? Какие свойства соответствуют этим понятиям?",
        answer: "Флексибильность - способность элементов изменять размеры в зависимости от пространства через Flexbox (display: flex, flex-direction, flex-wrap, justify-content, align-items).<br/>Эластичность - изменение размеров для гармоничного макета через CSS Grid (display: grid, grid-template-columns/rows, grid-gap).",
        difficulty: "easy"
      },
      {
        id: "css-24",
        question: "Какие методы оптимизации производительности CSS вы знаете?",
        answer: "Минификация и сжатие, комбинирование файлов, критический CSS (инлайн для первого экрана), удаление неиспользуемого кода, автопрефиксер, объединение изображений в спрайты, отложенная загрузка некритических стилей, кэширование, сжатие GZIP, упрощение селекторов, использование системных шрифтов.",
        difficulty: "easy"
      },
      {
        id: "css-25",
        question: "Что такое 'ретинизация' изображений и как связано с CSS?",
        answer: "Ретинизация - создание изображений с высоким разрешением для экранов с высокой плотностью пикселей (retina displays). В CSS используются медиазапросы (@media с min-device-pixel-ratio) для загрузки версий с разным разрешением и background-size для корректного масштабирования.",
        difficulty: "easy"
      },
      {
        id: "css-26",
        question: "Какие нововведения были введены в CSS3 по сравнению с CSS2?",
        answer: "Flexbox и Grid, анимации (@keyframes) и переходы (transition), тени (box-shadow, text-shadow), градиенты, @font-face для подключения шрифтов, медиазапросы, псевдоэлементы ::before/::after, новые селекторы, border-radius, множественные фоны, transform, rgba цвета, CSS переменные.",
        difficulty: "easy"
      },
      {
        id: "css-27",
        question: "Что такое 'крест-браузерное тестирование' (cross-browser testing) и как оно применяется к CSS?",
        answer: "Проверка веб-сайта на разных браузерах и их версиях для обеспечения одинакового отображения.<br/>В CSS проверяется: отображение свойств, совместимость значений, работа анимаций, медиазапросы, вендорные префиксы. Используются инструменты типа BrowserStack, CrossBrowserTesting.",
        difficulty: "easy"
      },
      {
        id: "css-28",
        question: "Каким образом CSS может влиять на SEO (оптимизацию для поисковых систем)?",
        answer: "Скорость загрузки (минификация, сжатие), мобильная адаптивность (responsive design), семантическая разметка, правильная структура контента (заголовки h1-h6), оптимизация изображений через CSS, быстрая загрузка критического CSS, улучшение пользовательского опыта. Избегать скрытия контента через display: none для SEO.",
        difficulty: "easy"
      },
      {
        id: "css-29",
        question: "Что такое 'гибкая' (fluid) и 'фиксированная' (fixed) верстка? Какие преимущества и недостатки каждого подхода?",
        answer: "Гибкая - размеры в относительных единицах (%), адаптируется к экрану. Преимущества: адаптивность, широкий охват. Недостатки: сложность контроля макета.<br/>Фиксированная - размеры в px, постоянные. Преимущества: полный контроль. Недостатки: неадаптивность, проблемы на мобильных.",
        difficulty: "easy"
      },
      {
        id: "css-30",
        question: "Какие методы обеспечивают поддержку многоязычности и локализации с использованием CSS?",
        answer: "Адаптивные шрифты для разных языков, свойства text-align и direction (для RTL языков), локализованные стили через атрибут lang, селекторы языка ([lang='en']), разные классы для регионов, псевдоэлементы :lang() для специфичных стилей, гибкая верстка для текстов разной длины.",
        difficulty: "easy"
      },
      {
        id: "css-31",
        question: "Какие преимущества имеет использование методологии CSS-in-JS по сравнению с обычными CSS файлами?",
        answer: "Локализация стилей внутри компонентов, избежание конфликтов, динамические стили на основе состояния, автоматическая оптимизация и минимизация, изоляция компонентов, легкость темизации, переиспользование стилей с компонентами.<br/>Недостатки: дополнительная сложность, требует обучения.",
        difficulty: "easy"
      },
      {
        id: "css-32",
        question: "Что такое 'переполнение контейнера' (overflow) и как управлять им при разработке интерфейса?",
        answer: "Ситуация, когда содержимое выходит за границы элемента. Управление через overflow со значениями: visible (виден за границами), hidden (скрыт), scroll (полосы прокрутки всегда), auto (полосы при необходимости). Также overflow-x, overflow-y для отдельных осей.",
        difficulty: "easy"
      },
      {
        id: "css-33",
        question: "Как работают CSS-градиенты и какие типы градиентов существуют?",
        answer: "Градиенты создают плавные переходы между цветами.<br/>Типы: linear-gradient (линейный вдоль оси), radial-gradient (радиальный от центра), conic-gradient (конический вокруг точки), repeating-linear-gradient и repeating-radial-gradient (повторяющиеся). Задаются через background или background-image.",
        difficulty: "easy"
      },
      {
        id: "css-34",
        question: "Что такое 'респонсивные изображения' и как обеспечить их корректную загрузку на разных устройствах?",
        answer: "Изображения, адаптирующиеся к разным экранам.<br/>Методы: атрибут srcset (список изображений разных размеров), sizes (размеры для разных экранов), элемент picture (разные источники для сценариев), CSS с max-width: 100% и height: auto, медиазапросы для background-image.",
        difficulty: "easy"
      },
      {
        id: "css-35",
        question: "Какие новые возможности по работе с текстом были добавлены в CSS3?",
        answer: "@font-face для подключения шрифтов, text-shadow для теней, word-wrap и overflow-wrap для переноса, text-overflow для обрезки, hyphens для переносов, letter-spacing и word-spacing, text-align-last, text-transform, writing-mode для направления текста, font-feature-settings для функций шрифтов.",
        difficulty: "easy"
      },
      {
        id: "css-36",
        question: "Что такое 'медиа-запросы' (media queries) и как они используются для создания адаптивного дизайна?",
        answer: "Техника применения стилей на основе характеристик устройства (ширина экрана, ориентация, разрешение). Используются в @media правилах.<br/>Пример: @media (max-width: 768px) { ... } применит стили для экранов до 768px. Основа адаптивного дизайна для разных устройств.",
        difficulty: "easy"
      },
      {
        id: "css-37",
        question: "Какие способы вертикального выравнивания элементов в CSS вы знаете?",
        answer: "Flexbox (align-items: center), CSS Grid (align-items: center), position: absolute + transform: translateY(-50%), display: table-cell + vertical-align: middle, псевдоэлемент ::before с vertical-align, margin: auto во Flexbox. Выбор метода зависит от контекста и структуры макета.",
        difficulty: "easy"
      },
      {
        id: "css-38",
        question: "Что такое 'плавающие элементы' (floats) в CSS и как они влияют на макет?",
        answer: "Float позволяет элементам 'плавать' по краям, обтекаясь текстом. Использовались для многоколоночных макетов.<br/>Проблемы: схлопывание высоты контейнера, сложность с доступностью.<br/>Сегодня вместо float рекомендуется Flexbox и Grid, которые более предсказуемы и мощны.",
        difficulty: "easy"
      },
      {
        id: "css-39",
        question: "Какие преимущества и недостатки имеют иконочные шрифты по сравнению с SVG иконками?",
        answer: "Иконочные шрифты: легкость использования, простое изменение размера/цвета, спрайты. Недостатки: ограниченность деталей, один цвет.<br/>SVG: высокая детализация, множество цветов, анимации, масштабируемость. Недостатки: сложность внедрения, больший размер файлов. SVG предпочтительнее для сложных иконок.",
        difficulty: "easy"
      },
      {
        id: "css-40",
        question: "Что такое 'сгенерированный контент' (generated content) и как он может использоваться в CSS?",
        answer: "Контент, добавляемый через ::before и ::after псевдоэлементы с помощью свойства content. Используется для: декоративных элементов, иконок, стрелок, меток, числовых списков без изменения HTML. Важно учитывать доступность - декоративный контент не должен влиять на семантику.",
        difficulty: "easy"
      },
      {
        id: "css-41",
        question: "Как работает система единиц измерения rem в CSS? В чем её преимущества перед px и em?",
        answer: "rem (root em) - относительная единица от размера шрифта корневого элемента html.<br/>Преимущества: предсказуемость (не зависит от вложенности как em), избежание каскада размеров, универсальность, простота масштабирования всей страницы через изменение root, доступность (пользователи могут менять размер).",
        difficulty: "easy"
      },
      {
        id: "css-42",
        question: "Что такое 'скользящий эффект' (parallax) в веб-дизайне и как его реализовать с помощью CSS?",
        answer: "Эффект, когда элементы движутся с разной скоростью при прокрутке, создавая глубину.<br/>Реализация: background-attachment: fixed для фона, transform с perspective, псевдоэлементы с разным позиционированием. Можно комбинировать с JavaScript для более сложных эффектов. Важно учитывать производительность.",
        difficulty: "easy"
      },
      {
        id: "css-43",
        question: "Как работают фильтры в CSS и какие виды фильтров существуют?",
        answer: "Свойство filter применяет визуальные эффекты к элементам.<br/>Виды: brightness (яркость), contrast (контрастность), saturate (насыщенность), blur (размытие), hue-rotate (поворот тона), invert (инверсия), opacity (прозрачность), sepia (сепия), drop-shadow (тень).<br/>Пример: filter: brightness(150%).",
        difficulty: "easy"
      },
      {
        id: "css-44",
        question: "Что такое 'каскадность' (cascading) в CSS и какие приоритеты применения стилей в селекторах?",
        answer: "Каскадность - механизм определения, какой стиль применить при конфликтах.<br/>Приоритеты: 1) !important (наивысший), 2) специфичность селектора (ID > class > element), 3) порядок в коде (последний побеждает), 4) происхождение (inline > internal > external). Понимание каскадности критично для управления стилями.",
        difficulty: "easy"
      },
      {
        id: "css-45",
        question: "Какие методы оптимизации загрузки CSS на веб-странице вы знаете?",
        answer: "Минификация и сжатие CSS, комбинирование файлов, асинхронная загрузка (async), отложенная загрузка (defer), критический CSS inline в head, кэширование с правильными заголовками, сжатие GZIP/Brotli, удаление неиспользуемых стилей, медиазапросы для условной загрузки, использование CDN.",
        difficulty: "easy"
      },
      {
        id: "css-46",
        question: "Что такое 'доступность первого взгляда' (First Meaningful Paint) и как CSS может повлиять на этот показатель?",
        answer: "FMP - время отображения основного контента, понятного пользователю.<br/>CSS влияет через: загрузку критических стилей inline, отложенную загрузку некритических, минификацию, уменьшение блокирующего рендеринга, оптимизацию изображений, сокрытие невидимых элементов. Быстрый FMP улучшает пользовательский опыт.",
        difficulty: "easy"
      },
      {
        id: "css-47",
        question: "Как использовать псевдокласс :not() для выбора элементов, которые НЕ соответствуют определенному селектору?",
        answer: "Синтаксис: :not(selector) { стили }<br/>Пример: p:not(.special) выберет все p кроме тех, у которых класс special.<br/>Ограничения: можно указать только один селектор внутри :not(), элементы внутри выбранного селектора также исключаются. Мощный инструмент для инверсного выбора.",
        difficulty: "easy"
      },
      {
        id: "css-48",
        question: "Что такое 'градиентные переходы' (gradient transitions) в CSS и как их создать с помощью анимаций?",
        answer: "Плавные переходы между разными состояниями градиента.<br/>Создание: используйте @keyframes с изменением background-image от одного gradient к другому, примените через animation.<br/>Пример: @keyframes gradient-transition { 0% { linear-gradient(red, blue) } 100% { linear-gradient(yellow, green) } }",
        difficulty: "easy"
      },
      {
        id: "css-49",
        question: "Какие методы сглаживания шрифтов существуют в CSS и как они влияют на внешний вид текста?",
        answer: "Основные методы: антиалиасинг (стандартный, плавные переходы между цветами), сглаживающее поднятие (теневые эффекты для жирности), пиксельное сглаживание (четкие пиксельные края).<br/>Выбор метода зависит от браузера и ОС. Браузеры обычно автоматически применяют оптимальный метод.",
        difficulty: "easy"
      },
      {
        id: "css-50",
        question: "Что такое 'медиа-типы' (media types) в CSS и для чего они используются?",
        answer: "Спецификации для определения типа устройства: screen (экраны), print (печать), speech (голосовые браузеры), all (все типы).<br/>Используются в @media правилах: @media print { ... } для печати.<br/>Позволяют адаптировать стили к разным контекстам использования.",
        difficulty: "easy"
      },
      {
        id: "css-51",
        question: "Как работает псевдоэлемент ::first-letter и как его использовать для стилизации первой буквы абзаца?",
        answer: "::first-letter стилизует первую букву элемента.<br/>Пример: p::first-letter { font-size: 2em; color: red; }<br/>Ограничения: применяется только к первой букве первого элемента, ограничен базовыми свойствами (размер, цвет, фон). Поддержка может различаться в браузерах.",
        difficulty: "easy"
      },
      {
        id: "css-52",
        question: "Что такое 'вложенные селекторы' (nested selectors) в CSS и как они используются?",
        answer: "Описание иерархии элементов для лучшей организации кода (в препроцессорах).<br/>Пример в Sass: .nav { ul { li { ... } } }<br/>Преимущества: читаемость, локальная область видимости, уменьшение повторений.<br/>Важно: избегать слишком глубокой вложенности (более 3-4 уровней).",
        difficulty: "easy"
      },
      {
        id: "css-53",
        question: "Как можно реализовать эффект 'скользящей шапки' (sticky header) с помощью CSS?",
        answer: "Используйте position: sticky с top: 0.<br/>Пример: .header { position: sticky; top: 0; z-index: 100; }<br/>Элемент остается видимым при прокрутке. Поддержка может различаться в старых браузерах, для них может понадобиться JavaScript fallback.",
        difficulty: "easy"
      },
      {
        id: "css-54",
        question: "Что такое 'CSS-перехватчики' (CSS Houdini) и какие API они предоставляют для расширения CSS?",
        answer: "Набор API для создания собственных CSS-модулей и расширения возможностей CSS.<br/>API: Paint API (кастомное рисование), Layout API (контроль расположения), Animation API (кастомные анимации), Typed OM API (доступ к DOM в CSS), Font Metrics API. Открывает новые возможности для сложных эффектов.",
        difficulty: "easy"
      },
      {
        id: "css-55",
        question: "Какие свойства в CSS используются для управления текстовым оформлением?",
        answer: "font-family, font-size, font-weight, font-style, text-align, line-height, letter-spacing, word-spacing, text-decoration, text-transform, color, text-shadow, white-space, vertical-align, text-overflow. Комбинирование этих свойств создает разнообразные стили текста.",
        difficulty: "easy"
      },
      {
        id: "css-56",
        question: "Что такое 'псевдоэлемент ::marker' и как он используется для стилизации маркеров списков?",
        answer: "::marker стилизует маркеры элементов списка li.<br/>Пример: li::marker { content: '→'; color: blue; font-weight: bold; }<br/>Позволяет создавать кастомные маркеры. Поддержка ограничена в некоторых браузерах, проверяйте совместимость на Can I use.",
        difficulty: "easy"
      },
      {
        id: "css-57",
        question: "Как создать анимацию 'плавное появление' (fade-in) элемента при загрузке страницы с помощью CSS?",
        answer: "Используйте opacity с transition или animation.<br/>CSS: .element { opacity: 0; transition: opacity 1s; }<br/>JavaScript: setTimeout(() => element.classList.add('show'), 100);<br/>CSS: .element.show { opacity: 1; }<br/>Или через @keyframes с animation от opacity: 0 до 1.",
        difficulty: "easy"
      },
      {
        id: "css-58",
        question: "Что такое 'границы' (box sizing) в CSS и какие значения они могут иметь?",
        answer: "box-sizing определяет, как вычисляется общая ширина/высота элемента.<br/>content-box (default): размер = content, padding и border добавляются.<br/>border-box: размер включает content, padding и border.<br/>border-box упрощает контроль размеров, рекомендуется для современной верстки.",
        difficulty: "easy"
      },
      {
        id: "css-59",
        question: "Какие методы 'обнуления стилей' (CSS resets) существуют и для чего они используются?",
        answer: "Методы для стандартизации отображения в разных браузерах:<br/>Eric Meyer's Reset (полный сброс), Normalize.css (нормализация с сохранением полезных стилей), Reset.css (радикальный сброс), Reboot (Bootstrap).<br/>Цель: предсказуемость, кросс-браузерность, сокращение времени разработки.",
        difficulty: "easy"
      },
      {
        id: "css-60",
        question: "Что такое 'селекторы состояний' (state selectors) в CSS и как они используются для стилизации интерактивных элементов?",
        answer: "Псевдоклассы для стилей в зависимости от состояния: :hover (наведение), :active (активация), :focus (фокус), :visited (посещенные ссылки), :disabled (отключено), :checked (выбрано).<br/>Пример: .button:hover { background: blue; }<br/>Делают интерфейсы более интерактивными и отзывчивыми.",
        difficulty: "easy"
      },
      {
        id: "css-61",
        question: "Как работает свойство will-change и в каких случаях оно может быть полезным?",
        answer: "will-change предупреждает браузер о предстоящих изменениях для оптимизации.<br/>Пример: .element { will-change: transform, opacity; }<br/>Полезно для: анимаций, трансформаций, скроллинга, параллакса, сложных DOM структур.<br/>Важно: использовать осторожно, только когда необходимо, иначе может ухудшить производительность.",
        difficulty: "easy"
      },
      {
        id: "css-62",
        question: "Что такое 'полифиллы' (polyfills) в контексте CSS и зачем они используются?",
        answer: "Код для поддержки новых CSS-функций в старых браузерах.<br/>Примеры: полифиллы для Flexbox, Grid, CSS-переменных, анимаций в старых IE.<br/>Используются для обеспечения совместимости. Недостатки: дополнительная нагрузка на загрузку и производительность. Применять разумно.",
        difficulty: "easy"
      },
      {
        id: "css-63",
        question: "Как работает свойство clip-path и как оно может быть использовано для создания необычных форм элементов?",
        answer: "clip-path создает обрезанные области вокруг элемента.<br/>Значения: геометрические формы (circle, ellipse), polygon() для многоугольников, URL на SVG-маску.<br/>Пример: clip-path: polygon(50% 0%, 0% 100%, 100% 100%); создаст треугольник.<br/>Поддержка различается в браузерах.",
        difficulty: "easy"
      },
      {
        id: "css-64",
        question: "Что такое 'комбинаторы соседства' (adjacent sibling combinators) в CSS и как они применяются для стилизации элементов на одном уровне вложенности?",
        answer: "+ (плюс) - выбирает элемент сразу после указанного. Пример: h1 + p { ... } выберет первый p после h1.<br/>~ (тильда) - выбирает все элементы после указанного на том же уровне. Пример: h1 ~ p выберет все p после h1.",
        difficulty: "easy"
      },
      {
        id: "css-65",
        question: "Как создать анимацию с эффектом 'параллакса' (parallax scrolling) с использованием CSS?",
        answer: "Методы: background-attachment: fixed для фона, transform с perspective и translate3d, разные слои с position.<br/>Пример: .parallax { background-attachment: fixed; background-size: cover; }<br/>Можно комбинировать с JavaScript для более сложных эффектов. Учитывайте производительность.",
        difficulty: "easy"
      },
      {
        id: "css-66",
        question: "Что такое 'селекторы атрибутов' (attribute selectors) и как они используются для выбора элементов по атрибутам?",
        answer: "[attribute] - элементы с атрибутом: a[target]<br/>[attribute=value] - с конкретным значением: a[target='_blank']<br/>[attribute^=value] - начинается с: img[src^='icon_']<br/>[attribute$=value] - заканчивается на<br/>[attribute*=value] - содержит.<br/>Полезны для стилизации по состоянию или типу.",
        difficulty: "easy"
      },
      {
        id: "css-67",
        question: "Какие методы подходят для создания анимации в CSS, помимо @keyframes?",
        answer: "transition - плавные переходы между состояниями при изменении свойств.<br/>transform - трансформации (rotate, scale, translate) с transition.<br/>animation - с параметрами без @keyframes.<br/>Комбинирование методов создает сложные эффекты. transition проще, но менее гибок чем @keyframes.",
        difficulty: "easy"
      },
      {
        id: "css-68",
        question: "Что такое 'CSS Grid Layout' и какие особенности этой системы сеток?",
        answer: "Мощная система для двумерных сеток.<br/>Особенности: контроль строк и столбцов одновременно, точное позиционирование (grid-row, grid-column), автоматическое распределение, фракции (fr), minmax(), медиазапросы для адаптивности, gap для промежутков. Идеален для сложных макетов.",
        difficulty: "easy"
      },
      {
        id: "css-69",
        question: "Каким образом можно создать адаптивные иконки с использованием CSS?",
        answer: "Методы: background-image с background-size и медиазапросами, SVG с viewBox (масштабируются), иконочные шрифты с font-size.<br/>Пример SVG: width: 100%; height: auto; fill: currentColor;<br/>SVG предпочтительнее - масштабируемость без потери качества, легко менять цвет.",
        difficulty: "easy"
      },
      {
        id: "css-70",
        question: "Что такое 'миксины' (mixins) в препроцессорах CSS и как они используются?",
        answer: "Переиспользуемые блоки стилей в Sass/Less.<br/>Sass: @mixin button-style { ... } затем @include button-style;<br/>Less: .button-style() { ... } затем .button-style();<br/>Могут принимать параметры для гибкости. Упрощают поддержку, сокращают дублирование кода.",
        difficulty: "easy"
      },
      {
        id: "css-71",
        question: "Какие методы обеспечения безопасности (security) применяются к CSS?",
        answer: "Экранирование и фильтрация пользовательского ввода, отсутствие чувствительных данных в CSS, CSP (Content Security Policy) заголовки, санирование стилей, минимизация !important, обновление библиотек, правильные разрешения на файлы, HTTPS для защиты передачи. Предотвращение CSS-инъекций и XSS.",
        difficulty: "easy"
      },
      {
        id: "css-72",
        question: "Что такое 'контентные контроли' (content control) в CSS и как они могут использоваться для создания интерактивных элементов?",
        answer: "Стилизованные элементы форм (checkbox, radio, range) для интерактивности без JavaScript.<br/>Используется appearance: none для сброса стандартных стилей, затем кастомная стилизация.<br/>Псевдоэлементы (::before, ::-webkit-slider-thumb) для деталей. Поддержка различается в браузерах.",
        difficulty: "easy"
      },
      {
        id: "css-73",
        question: "Как можно создать горизонтальное меню навигации с использованием CSS?",
        answer: "Методы: display: flex с justify-content для выравнивания, display: inline-block для li, float (устаревший).<br/>Пример Flexbox: .menu { display: flex; } .menu li { margin: 0 15px; }<br/>Flexbox - современный подход, проще и гибче.",
        difficulty: "easy"
      },
      {
        id: "css-74",
        question: "Что такое 'спрайты' (sprites) в CSS и как они используются для управления изображениями?",
        answer: "Объединение множества маленьких изображений в одно большое для оптимизации.<br/>Используется background-image с background-position для показа нужной части.<br/>Преимущества: сокращение HTTP-запросов, быстрая загрузка, лучшее кэширование. Сегодня часто заменяется SVG-спрайтами.",
        difficulty: "easy"
      },
      {
        id: "css-75",
        question: "Какие методы улучшения производительности CSS можно применить для снижения времени загрузки страницы?",
        answer: "Минификация и сжатие, комбинирование файлов, критический CSS inline, удаление неиспользуемого кода, спрайты, отложенная загрузка, кэширование, GZIP/Brotli сжатие, упрощение селекторов, системные шрифты, CDN, медиазапросы для условной загрузки.",
        difficulty: "easy"
      },
      {
        id: "css-76",
        question: "Что такое 'семантическая верстка' (semantic markup) в CSS и как она влияет на поисковую оптимизацию (SEO)?",
        answer: "Использование HTML-тегов по смыслу (header, nav, main, article, footer) с соответствующей CSS-стилизацией.<br/>Влияние на SEO: поисковики лучше понимают структуру, улучшается доступность, правильная иерархия заголовков, определение ключевых элементов. Повышает релевантность в поиске.",
        difficulty: "easy"
      },
      {
        id: "css-77",
        question: "Как можно реализовать анимацию появления (fade-in) элементов при прокрутке страницы с помощью CSS и JavaScript?",
        answer: "CSS: opacity: 0 и transition: opacity 1s.<br/>JavaScript: Intersection Observer отслеживает видимость элемента, при появлении добавляет класс с opacity: 1.<br/>Пример: if (entry.intersectionRatio > 0) { entry.target.style.opacity = '1'; }<br/>Более гибко чем чистый CSS.",
        difficulty: "easy"
      },
      {
        id: "css-78",
        question: "Что такое 'псевдокласс :focus' и как он используется для стилизации элементов при получении ими фокуса?",
        answer: ":focus применяется когда элемент получает фокус (клик или Tab).<br/>Пример: input:focus { border: 2px solid blue; outline: none; }<br/>Важно для доступности - пользователи клавиатуры должны видеть, где фокус. Не удаляйте outline без замены визуального индикатора.",
        difficulty: "easy"
      },
      {
        id: "css-79",
        question: "Как создать анимацию 'пульсации' (pulse) элемента с помощью CSS?",
        answer: "@keyframes pulse { 0%, 100% { transform: scale(1); opacity: 1; } 50% { transform: scale(1.2); opacity: 0.7; } }<br/>.element { animation: pulse 2s infinite; }<br/>Изменяет размер и прозрачность циклически. Можно настроить параметры для желаемого эффекта.",
        difficulty: "easy"
      },
      {
        id: "css-80",
        question: "Что такое 'переменные окружения' (environment variables) в препроцессорах CSS и как они могут быть полезны для настройки стилей?",
        answer: "Именованные значения вне файлов стилей для гибкой настройки.<br/>Sass: $primary-color: #007bff; затем color: $primary-color;<br/>Преимущества: модульность, легкость изменений в одном месте, адаптация к разным средам (dev/prod), централизованная настройка тем.",
        difficulty: "easy"
      },
      {
        id: "css-81",
        question: "Каким образом можно стилизовать формы (input, textarea, select) с использованием CSS?",
        answer: "Изменение фона, границ, шрифтов через базовые свойства. При фокусе: border-color, box-shadow, outline: none (с заменой). Кастомные элементы: appearance: none, затем своя стилизация. Для select: псевдоэлементы для стрелки. Учитывать доступность и UX.",
        difficulty: "easy"
      },
      {
        id: "css-82",
        question: "Что такое 'анимации ключевых кадров' (keyframe animations) в CSS и как они работают?",
        answer: "Плавные переходы между состояниями через @keyframes.<br/>Процесс: 1) Определить ключевые кадры (@keyframes name { 0% {...} 100% {...} }), 2) Применить через animation: name 2s infinite.<br/>Браузер интерполирует значения между кадрами. Гибче transition.",
        difficulty: "easy"
      },
      {
        id: "css-83",
        question: "Какие свойства CSS используются для управления внешними отступами и полями элементов?",
        answer: "margin - внешний отступ (margin-top, margin-right, margin-bottom, margin-left).<br/>padding - внутренний отступ (padding-top, padding-right, padding-bottom, padding-left).<br/>Сокращенная запись: margin: 10px 20px 15px 5px (верх, право, низ, лево).<br/>margin: 10px 20px (верх/низ, лево/право).",
        difficulty: "easy"
      },
      {
        id: "css-84",
        question: "Что такое 'флекс-контейнер' (flex container) и 'флекс-элементы' (flex items) в контексте CSS Flexbox?",
        answer: "Флекс-контейнер - родительский элемент с display: flex или inline-flex.<br/>Флекс-элементы - прямые дочерние элементы контейнера, автоматически становятся гибкими.<br/>Контейнер управляет расположением элементов вдоль главной и поперечной осей. Мощный инструмент для одномерных макетов.",
        difficulty: "easy"
      },
      {
        id: "css-85",
        question: "Как можно выровнять элементы по вертикали с использованием CSS?",
        answer: "Flexbox: display: flex; align-items: center.<br/>Grid: display: grid; align-items: center.<br/>Position: position: absolute; top: 50%; transform: translateY(-50%).<br/>Table: display: table-cell; vertical-align: middle.<br/>Margin auto во Flexbox.<br/>Выбор зависит от контекста.",
        difficulty: "easy"
      },
      {
        id: "css-86",
        question: "Что такое 'гибридные сетки' (hybrid grids) в CSS и как они могут быть использованы для создания сложных макетов?",
        answer: "Комбинирование Grid и Flexbox в одном макете.<br/>Подход: Grid для основной структуры страницы, Flexbox внутри ячеек для контента.<br/>Преимущества: гибкость, адаптивность, использование сильных сторон обеих технологий. Усложняет поддержку, но эффективен для сложных интерфейсов.",
        difficulty: "easy"
      },
      {
        id: "css-87",
        question: "Как работает 'вендорное префиксирование' (vendor prefixes) и зачем оно используется в CSS?",
        answer: "Добавление префиксов (-webkit-, -moz-, -ms-, -o-) к экспериментальным свойствам для разных браузеров.<br/>Пример: -webkit-transform, -moz-transform, transform.<br/>Цель: тестирование новых функций, совместимость. Сегодня менее актуально, используйте Autoprefixer для автоматизации.",
        difficulty: "easy"
      },
      {
        id: "css-88",
        question: "Что такое 'флекс-обёртка' (flex-wrap) в контексте CSS Flexbox и как оно влияет на макет?",
        answer: "flex-wrap определяет перенос элементов на новую строку/столбец.<br/>Значения: nowrap (default, в одну линию), wrap (перенос при необходимости), wrap-reverse (перенос в обратном порядке).<br/>Пример: display: flex; flex-wrap: wrap; - элементы переносятся для адаптивности.",
        difficulty: "easy"
      },
      {
        id: "css-89",
        question: "Как создать адаптивную галерею изображений с использованием CSS?",
        answer: "Flexbox: display: flex; flex-wrap: wrap; justify-content: space-between.<br/>Для items: flex: 1; margin: 10px;<br/>Для img: width: 100%; height: auto;<br/>Grid альтернатива: display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)).<br/>Медиазапросы для дополнительной адаптивности.",
        difficulty: "easy"
      },
      {
        id: "css-90",
        question: "Что такое 'базовые стили' (normalize.css, reset.css) и какое их значение для веб-разработки?",
        answer: "Стандартизация отображения элементов в разных браузерах.<br/>Reset.css - полный сброс стилей браузера.<br/>Normalize.css - нормализация с сохранением полезных стилей.<br/>Значение: предсказуемость, кросс-браузерность, сокращение времени разработки, основа для дизайна. Normalize более популярен сегодня.",
        difficulty: "easy"
      },
      {
        id: "css-91",
        question: "Как работает 'переполнение по контенту' (content overflow) и как его контролировать с помощью CSS?",
        answer: "Когда содержимое превышает размеры элемента.<br/>Контроль через overflow: visible (виден), hidden (скрыт), scroll (полосы всегда), auto (полосы при необходимости).<br/>Также overflow-x, overflow-y для осей.<br/>Важно для UX - правильный контроль обеспечивает доступность контента.",
        difficulty: "easy"
      },
      {
        id: "css-92",
        question: "Что такое 'критический путь рендеринга' (Critical Rendering Path) и как CSS может влиять на него?",
        answer: "Последовательность шагов браузера для отображения: загрузка, DOM, CSSOM, рендер-дерево, макет, отрисовка.<br/>CSS влияет: блокирующая загрузка, критический CSS inline, минификация, асинхронная загрузка, сжатие. Оптимизация ускоряет первое отображение контента.",
        difficulty: "easy"
      },
      {
        id: "css-93",
        question: "Каким образом можно создать анимацию текста, меняющего цвет, размер и стиль с помощью CSS?",
        answer: "@keyframes textAnim { 0% { color: red; font-size: 16px; } 50% { color: blue; font-size: 24px; font-weight: bold; } 100% { color: green; font-size: 16px; } }<br/>.text { animation: textAnim 3s infinite; }<br/>Изменяет свойства текста плавно циклически.",
        difficulty: "easy"
      },
      {
        id: "css-94",
        question: "Что такое 'переменные CSS' (CSS variables) и как они используются для упрощения стилизации?",
        answer: "Кастомные свойства для переиспользования значений.<br/>Определение: :root { --main-color: #007bff; }<br/>Использование: color: var(--main-color);<br/>Преимущества: легкость изменений, динамичность через JS, создание тем, модульность. Улучшают поддержку и читаемость кода.",
        difficulty: "easy"
      },
      {
        id: "css-95",
        question: "Как можно создать адаптивные таблицы с использованием CSS?",
        answer: "Методы: гибкая ширина столбцов (%), скрытие столбцов через медиазапросы (display: none), адаптивные ячейки (изменение font-size, text-overflow), горизонтальная прокрутка (overflow-x: auto), псевдоэлементы для заголовков на мобильных. Комбинировать для лучшего UX.",
        difficulty: "easy"
      },
      {
        id: "css-96",
        question: "Что такое 'затенение элементов' (element shadowing) в CSS и как оно может быть использовано для изменения стиля элементов в зависимости от их расположения?",
        answer: "Изменение стиля элементов на основе позиции относительно других.<br/>Пример: .parent:hover .child { transform: translateY(-10px); }<br/>Используется для интерактивных эффектов, подсветки, анимаций при наведении. Создает динамичный интерфейс без JavaScript.",
        difficulty: "easy"
      },
      {
        id: "css-97",
        question: "Каким образом можно создать анимацию 'мерцания' (flicker) элемента с использованием CSS?",
        answer: "@keyframes flicker { 0%, 100% { opacity: 1; } 50% { opacity: 0; } }<br/>.element { animation: flicker 1s infinite; }<br/>.element:hover { animation: none; }<br/>Элемент циклически меняет прозрачность. Можно настроить параметры. Использовать осторожно - может вызывать дискомфорт.",
        difficulty: "easy"
      },
      {
        id: "css-98",
        question: "Что такое 'гибкие изображения' (fluid images) и как они могут быть реализованы с помощью CSS?",
        answer: "Изображения, адаптирующиеся к контейнеру с сохранением пропорций.<br/>Методы: max-width: 100%; height: auto, width: 100%; height: auto, аспектные отношения через padding-bottom, object-fit: cover.<br/>Предотвращают искажение и обеспечивают адаптивность.",
        difficulty: "easy"
      },
      {
        id: "css-99",
        question: "Как создать 'слайдер' (slider) с переключением слайдов с использованием CSS?",
        answer: "Используйте input[type='radio'] со скрытием, связанные label для навигации, :checked для переключения.<br/>CSS: input:checked ~ .slides { transform: translateX(-100%); }<br/>Переключение через transform. Для сложных слайдеров лучше использовать JavaScript.",
        difficulty: "easy"
      },
      {
        id: "css-100",
        question: "Что такое 'горизонтальная прокрутка' (horizontal scrolling) и как её реализовать с помощью CSS?",
        answer: "Прокрутка контента горизонтально при нехватке места.<br/>Реализация: .container { width: 100%; overflow-x: auto; white-space: nowrap; }<br/>Для контента: display: inline-block.<br/>Браузер добавит горизонтальную полосу при необходимости. Полезно для галерей, таблиц, длинного контента.",
        difficulty: "easy"
      }
    ]
  },
  {
    id: "javascript",
    name: "JavaScript",
    questions: [
      {
        id: "js-1",
        question: "Что такое замыкания (closures) в JavaScript?",
        answer: "Замыкание — это функция, которая имеет доступ к переменным из внешней области видимости даже после того, как внешняя функция завершила выполнение. Это позволяет создавать приватные переменные и методы.",
        difficulty: "hard"
      },
      {
        id: "js-2",
        question: "В чем разница между var, let и const?",
        answer: "var имеет функциональную область видимости и поднимается. let и const имеют блочную область видимости. const нельзя переназначить, но объекты и массивы можно изменять.",
        difficulty: "medium"
      },
      {
        id: "js-3",
        question: "Что такое Event Loop в JavaScript?",
        answer: "Event Loop — это механизм, который позволяет JavaScript выполнять неблокирующие операции, перемещая колбэки из очереди задач в стек вызовов, когда стек становится пустым.",
        difficulty: "hard"
      },
      {
        id: "js-4",
        question: "Объясните hoisting в JavaScript",
        answer: "Hoisting — это поднятие объявлений переменных и функций в начало их области видимости во время компиляции.",
        difficulty: "medium"
      },
      {
        id: "js-5",
        question: "Что такое this в JavaScript?",
        answer: "this — ключевое слово, которое ссылается на объект, в контексте которого выполняется функция. Значение this зависит от способа вызова функции.",
        difficulty: "medium"
      },
      {
        id: "js-6",
        question: "В чем разница между == и ===?",
        answer: "== выполняет приведение типов перед сравнением, === сравнивает без приведения типов (строгое равенство).",
        difficulty: "easy"
      },
      {
        id: "js-7",
        question: "Что такое Promise в JavaScript?",
        answer: "Promise — объект, представляющий результат асинхронной операции. Может быть в состоянии pending, fulfilled или rejected.",
        difficulty: "medium"
      },
      {
        id: "js-8",
        question: "Объясните async/await",
        answer: "async/await — синтаксический сахар для работы с Promise. async функция возвращает Promise, await приостанавливает выполнение до разрешения Promise.",
        difficulty: "medium"
      },
      {
        id: "js-9",
        question: "Что такое прототипы в JavaScript?",
        answer: "Каждый объект в JavaScript имеет прототип — другой объект, от которого он наследует свойства и методы через prototype chain.",
        difficulty: "hard"
      },
      {
        id: "js-10",
        question: "Объясните методы call, apply и bind",
        answer: "call и apply вызывают функцию с заданным this, различаются передачей аргументов. bind создает новую функцию с привязанным this.",
        difficulty: "hard"
      },
      {
        id: "js-11",
        question: "Что такое модули в JavaScript?",
        answer: "Модули позволяют организовать код в отдельные файлы с помощью export/import, обеспечивая инкапсуляцию и переиспользование.",
        difficulty: "medium"
      },
      {
        id: "js-12",
        question: "Объясните деструктуризацию",
        answer: "Деструктуризация позволяет извлекать значения из массивов или объектов в отдельные переменные: const {name, age} = person;",
        difficulty: "easy"
      },
      {
        id: "js-13",
        question: "Что такое spread и rest операторы?",
        answer: "Spread (...) распаковывает элементы, rest (...) собирает элементы в массив. Spread используется при вызове, rest в параметрах.",
        difficulty: "medium"
      },
      {
        id: "js-14",
        question: "Объясните WeakMap и WeakSet",
        answer: "WeakMap и WeakSet хранят слабые ссылки на объекты, позволяя сборщику мусора удалять неиспользуемые объекты.",
        difficulty: "hard"
      },
      {
        id: "js-15",
        question: "Что такое Proxy в JavaScript?",
        answer: "Proxy позволяет перехватывать и переопределять операции с объектами (get, set, has, deleteProperty и др.).",
        difficulty: "hard"
      },
      {
        id: "js-16",
        question: "Объясните Symbol в JavaScript",
        answer: "Symbol — примитивный тип данных для создания уникальных идентификаторов, часто используется для приватных свойств.",
        difficulty: "hard"
      },
      {
        id: "js-17",
        question: "Что такое генераторы (generators)?",
        answer: "Генераторы — функции, которые могут приостанавливать и возобновлять выполнение с помощью yield, возвращая итератор.",
        difficulty: "hard"
      },
      {
        id: "js-18",
        question: "Объясните Map и Set",
        answer: "Map — коллекция ключ-значение с любыми типами ключей. Set — коллекция уникальных значений любого типа.",
        difficulty: "medium"
      },
      {
        id: "js-19",
        question: "Что такое temporal dead zone?",
        answer: "Temporal Dead Zone — период между началом блока и инициализацией let/const переменной, где обращение к ней вызывает ReferenceError.",
        difficulty: "hard"
      },
      {
        id: "js-20",
        question: "Объясните microtasks и macrotasks",
        answer: "Microtasks (Promise, queueMicrotask) имеют более высокий приоритет чем macrotasks (setTimeout, setInterval) в Event Loop.",
        difficulty: "hard"
      },
      {
        id: "js-21",
        question: "Что такое Web Workers и как их использовать?",
        answer: "Web Workers выполняют JavaScript в фоновом потоке. Создаются через new Worker(), общаются через postMessage().",
        difficulty: "hard"
      },
      {
        id: "js-22",
        question: "Объясните работу Service Workers",
        answer: "Service Workers — прокси между приложением и сетью. Используются для кэширования, офлайн-работы, push-уведомлений.",
        difficulty: "hard"
      },
      {
        id: "js-23",
        question: "Что такое WebAssembly?",
        answer: "WebAssembly — бинарный формат для выполнения кода в браузере. Позволяет запускать код на C++, Rust с высокой производительностью.",
        difficulty: "hard"
      },
      {
        id: "js-24",
        question: "Объясните работу WebSocket API",
        answer: "WebSocket API обеспечивает двустороннюю связь: new WebSocket(), onopen, onmessage, send(), close().",
        difficulty: "hard"
      },
      {
        id: "js-25",
        question: "Что такое IndexedDB?",
        answer: "IndexedDB — низкоуровневое API для хранения больших объемов данных в браузере. Поддерживает индексы, транзакции, версионирование.",
        difficulty: "hard"
      },
      {
        id: "js-26",
        question: "Объясните работу Intersection Observer API",
        answer: "Intersection Observer отслеживает появление элементов в viewport: new IntersectionObserver(callback, options).",
        difficulty: "medium"
      },
      {
        id: "js-27",
        question: "Что такое ResizeObserver?",
        answer: "ResizeObserver отслеживает изменения размеров элементов: new ResizeObserver(callback).",
        difficulty: "medium"
      },
      {
        id: "js-28",
        question: "Объясните работу Performance API",
        answer: "Performance API измеряет производительность: performance.now(), performance.mark(), performance.measure().",
        difficulty: "hard"
      },
      {
        id: "js-29",
        question: "Что такое Web Audio API?",
        answer: "Web Audio API создает и обрабатывает звук: AudioContext, OscillatorNode, GainNode, AudioBuffer.",
        difficulty: "hard"
      },
      {
        id: "js-30",
        question: "Объясните работу WebRTC",
        answer: "WebRTC обеспечивает peer-to-peer связь: getUserMedia(), RTCPeerConnection, RTCDataChannel.",
        difficulty: "hard"
      },
      {
        id: "js-31",
        question: "Что такое строгий режим ('use strict')?",
        answer: "Строгий режим включает дополнительные проверки и ограничения в JavaScript: запрещает неявное создание глобальных переменных, дублирование параметров, использование this без контекста.",
        difficulty: "easy"
      },
      {
        id: "js-32",
        question: "Как работает оператор typeof?",
        answer: "typeof возвращает строку с типом операнда: 'number', 'string', 'boolean', 'undefined', 'object', 'function'. Имеет особенности с null (возвращает 'object') и массивом (возвращает 'object').",
        difficulty: "easy"
      },
      {
        id: "js-33",
        question: "В чем разница между null и undefined?",
        answer: "undefined — переменная объявлена, но не инициализирована. null — явное отсутствие значения. typeof undefined возвращает 'undefined', typeof null возвращает 'object'.",
        difficulty: "easy"
      },
      {
        id: "js-34",
        question: "Как работает оператор instanceof?",
        answer: "instanceof проверяет, является ли объект экземпляром класса или конструктора: obj instanceof Class. Проверяет цепочку прототипов.",
        difficulty: "easy"
      },
      {
        id: "js-35",
        question: "Что такое NaN и как его проверить?",
        answer: "NaN (Not a Number) — результат некорректной математической операции. Проверяется через isNaN() или Number.isNaN(). NaN не равен самому себе.",
        difficulty: "easy"
      },
      {
        id: "js-36",
        question: "Как работает оператор spread (...) в массивах?",
        answer: "Spread оператор распаковывает элементы массива: [...arr1, ...arr2] объединяет массивы, [...arr] создает копию массива.",
        difficulty: "easy"
      },
      {
        id: "js-37",
        question: "Что такое деструктуризация массивов?",
        answer: "Деструктуризация позволяет извлекать элементы массива в переменные: const [first, second] = arr. Можно использовать значения по умолчанию и пропускать элементы.",
        difficulty: "easy"
      },
      {
        id: "js-38",
        question: "Как работает метод map()?",
        answer: "map() создает новый массив, применяя функцию к каждому элементу: arr.map(x => x * 2). Не изменяет исходный массив.",
        difficulty: "easy"
      },
      {
        id: "js-39",
        question: "В чем разница между forEach и map?",
        answer: "forEach выполняет функцию для каждого элемента, но не возвращает новый массив. map создает новый массив с результатами вызова функции.",
        difficulty: "easy"
      },
      {
        id: "js-40",
        question: "Как работает метод filter()?",
        answer: "filter() создает новый массив с элементами, прошедшими проверку: arr.filter(x => x > 5). Возвращает пустой массив, если ни один элемент не прошел проверку.",
        difficulty: "easy"
      },
      {
        id: "js-41",
        question: "Что такое метод reduce()?",
        answer: "reduce() применяет функцию к каждому элементу, накапливая результат: arr.reduce((acc, curr) => acc + curr, 0). Второй аргумент — начальное значение.",
        difficulty: "medium"
      },
      {
        id: "js-42",
        question: "Как работает оператор rest (...) в параметрах функции?",
        answer: "Rest оператор собирает оставшиеся аргументы в массив: function sum(...args). Позволяет работать с произвольным количеством аргументов.",
        difficulty: "easy"
      },
      {
        id: "js-43",
        question: "Что такое стрелочные функции?",
        answer: "Стрелочные функции — короткий синтаксис для функций: const add = (a, b) => a + b. Не имеют своего this, arguments, super.",
        difficulty: "easy"
      },
      {
        id: "js-44",
        question: "Как работает метод slice()?",
        answer: "slice() создает копию части массива: arr.slice(1, 3). Не изменяет исходный массив. Без аргументов создает полную копию.",
        difficulty: "easy"
      },
      {
        id: "js-45",
        question: "В чем разница между slice() и splice()?",
        answer: "slice() создает копию части массива, не изменяя исходный. splice() изменяет исходный массив, удаляя или добавляя элементы.",
        difficulty: "easy"
      },
      {
        id: "js-46",
        question: "Как работает метод concat()?",
        answer: "concat() объединяет массивы: arr1.concat(arr2). Не изменяет исходные массивы. Может принимать несколько аргументов.",
        difficulty: "easy"
      },
      {
        id: "js-47",
        question: "Что такое метод includes()?",
        answer: "includes() проверяет наличие элемента в массиве: arr.includes(5). Возвращает true/false. Работает с примитивами и объектами.",
        difficulty: "easy"
      },
      {
        id: "js-48",
        question: "Как работает метод indexOf()?",
        answer: "indexOf() возвращает индекс первого вхождения элемента: arr.indexOf(5). Возвращает -1, если элемент не найден.",
        difficulty: "easy"
      },
      {
        id: "js-49",
        question: "Что такое метод find()?",
        answer: "find() возвращает первый элемент, удовлетворяющий условию: arr.find(x => x > 5). Возвращает undefined, если элемент не найден.",
        difficulty: "easy"
      },
      {
        id: "js-50",
        question: "Как работает метод some()?",
        answer: "some() проверяет, удовлетворяет ли хотя бы один элемент условию: arr.some(x => x > 5). Возвращает true/false.",
        difficulty: "easy"
      },
      {
        id: "js-51",
        question: "Что такое прототипное наследование в JavaScript?",
        answer: "Прототипное наследование — механизм, при котором объекты наследуют свойства и методы от других объектов через цепочку прототипов. Каждый объект имеет скрытое свойство [[Prototype]], которое ссылается на его прототип.",
        difficulty: "medium"
      },
      {
        id: "js-52",
        question: "Как работает Object.create()?",
        answer: "Object.create() создает новый объект с указанным прототипом: Object.create(proto, propertiesObject). Позволяет создавать объекты без конструкторов и настраивать их свойства.",
        difficulty: "medium"
      },
      {
        id: "js-53",
        question: "Что такое дескрипторы свойств в JavaScript?",
        answer: "Дескрипторы свойств определяют поведение свойства: value, writable, enumerable, configurable. Доступны через Object.getOwnPropertyDescriptor() и Object.defineProperty().",
        difficulty: "medium"
      },
      {
        id: "js-54",
        question: "Объясните работу Promise.all() и Promise.race()",
        answer: "Promise.all() ждет выполнения всех промисов и возвращает массив результатов. Promise.race() возвращает результат первого выполненного промиса. Оба возвращают Promise.",
        difficulty: "medium"
      },
      {
        id: "js-55",
        question: "Что такое async/await и как обрабатывать ошибки?",
        answer: "async/await — синтаксический сахар для работы с Promise. Ошибки обрабатываются через try/catch. async функция всегда возвращает Promise.",
        difficulty: "medium"
      },
      {
        id: "js-56",
        question: "Как работает Event Loop в JavaScript?",
        answer: "Event Loop обрабатывает асинхронные операции: сначала выполняет синхронный код, затем microtasks (Promise), затем macrotasks (setTimeout, setInterval).",
        difficulty: "medium"
      },
      {
        id: "js-57",
        question: "Что такое замыкания (closures) и как они работают?",
        answer: "Замыкание — функция, которая имеет доступ к переменным из внешней области видимости. Сохраняет ссылку на переменные даже после завершения выполнения внешней функции.",
        difficulty: "medium"
      },
      {
        id: "js-58",
        question: "Объясните работу this в JavaScript",
        answer: "this — контекст выполнения функции. Зависит от способа вызова: в методе объекта — сам объект, в обычной функции — window/undefined, в стрелочной — внешний контекст.",
        difficulty: "medium"
      },
      {
        id: "js-59",
        question: "Что такое WeakMap и WeakSet?",
        answer: "WeakMap и WeakSet хранят слабые ссылки на объекты, позволяя сборщику мусора удалять неиспользуемые объекты. Не итерируемы, ключи WeakMap — только объекты.",
        difficulty: "medium"
      },
      {
        id: "js-60",
        question: "Как работает Proxy в JavaScript?",
        answer: "Proxy — объект-обертка, перехватывающий операции с объектом: get, set, has, deleteProperty и др. Позволяет кастомизировать поведение объекта.",
        difficulty: "medium"
      },
      {
        id: "js-61",
        question: "Что такое Symbol в JavaScript?",
        answer: "Symbol — примитивный тип данных для создания уникальных идентификаторов. Используется для создания приватных свойств и специальных методов объектов.",
        difficulty: "medium"
      },
      {
        id: "js-62",
        question: "Объясните работу генераторов (generators)",
        answer: "Генераторы — функции, которые могут приостанавливать выполнение через yield. Возвращают итератор. Позволяют создавать асинхронный код в синхронном стиле.",
        difficulty: "medium"
      },
      {
        id: "js-63",
        question: "Что такое декораторы в JavaScript?",
        answer: "Декораторы — функции, которые модифицируют классы, методы или свойства. Используются для добавления функциональности без изменения исходного кода.",
        difficulty: "medium"
      },
      {
        id: "js-64",
        question: "Как работает Object.freeze() и Object.seal()?",
        answer: "Object.freeze() делает объект неизменяемым. Object.seal() запрещает добавлять/удалять свойства, но позволяет изменять существующие. Оба возвращают модифицированный объект.",
        difficulty: "medium"
      },
      {
        id: "js-65",
        question: "Что такое Reflect в JavaScript?",
        answer: "Reflect — встроенный объект, предоставляющий методы для перехватываемых операций. Используется с Proxy для создания более предсказуемого поведения.",
        difficulty: "medium"
      },
      {
        id: "js-66",
        question: "Объясните работу async итераторов",
        answer: "Async итераторы позволяют асинхронно перебирать данные. Используют Symbol.asyncIterator и методы next(), return(), throw(). Поддерживаются в for await...of.",
        difficulty: "medium"
      },
      {
        id: "js-67",
        question: "Что такое BigInt в JavaScript?",
        answer: "BigInt — тип данных для работы с целыми числами произвольной точности. Создается через n суффикс или BigInt(). Нельзя смешивать с обычными числами.",
        difficulty: "medium"
      },
      {
        id: "js-68",
        question: "Как работает Optional Chaining (?.)",
        answer: "Optional Chaining позволяет безопасно обращаться к вложенным свойствам объекта. Возвращает undefined вместо ошибки, если промежуточное свойство null или undefined.",
        difficulty: "medium"
      },
      {
        id: "js-69",
        question: "Что такое Nullish Coalescing (??)?",
        answer: "Nullish Coalescing возвращает правый операнд, если левый равен null или undefined. В отличие от ||, не заменяет другие falsy значения (0, '', false).",
        difficulty: "medium"
      },
      {
        id: "js-70",
        question: "Объясните работу Intl API",
        answer: "Intl API предоставляет интернационализацию: форматирование дат, чисел, строк, сортировку. Использует Intl.DateTimeFormat, Intl.NumberFormat, Intl.Collator.",
        difficulty: "medium"
      }
    ]
  },
  {
    id: "react",
    name: "React",
    questions: [
      {
        id: "react-1",
        question: "Что такое JSX?",
        answer: "JSX (JavaScript XML) — это синтаксическое расширение JavaScript, позволяющее писать HTML-подобный код в JavaScript. Babel транспилирует JSX в вызовы React.createElement().",
        difficulty: "easy"
      },
      {
        id: "react-2",
        question: "Объясните разницу между состоянием (state) и пропсами (props)",
        answer: "Props — это неизменяемые данные, передаваемые от родительского компонента к дочернему. State — это локальные изменяемые данные компонента, которые могут обновляться с помощью setState или useState.",
        difficulty: "medium"
      },
      {
        id: "react-3",
        question: "Что такое хуки (hooks) в React?",
        answer: "Хуки — это функции, которые позволяют использовать состояние и другие возможности React в функциональных компонентах. Примеры: useState, useEffect, useContext, useMemo.",
        difficulty: "medium"
      },
      {
        id: "react-4",
        question: "Объясните жизненный цикл компонентов React",
        answer: "Жизненный цикл включает: Mounting (componentDidMount), Updating (componentDidUpdate), Unmounting (componentWillUnmount). В функциональных компонентах используется useEffect.",
        difficulty: "medium"
      },
      {
        id: "react-5",
        question: "Что такое Virtual DOM?",
        answer: "Virtual DOM — это JavaScript представление реального DOM в памяти. React использует его для оптимизации обновлений, сравнивая изменения и обновляя только необходимые элементы.",
        difficulty: "medium"
      },
      {
        id: "react-6",
        question: "Объясните useEffect хук",
        answer: "useEffect выполняет побочные эффекты в функциональных компонентах: запросы к API, подписки, изменение DOM. Может имитировать componentDidMount, componentDidUpdate, componentWillUnmount.",
        difficulty: "medium"
      },
      {
        id: "react-7",
        question: "Что такое Context API?",
        answer: "Context API позволяет передавать данные через дерево компонентов без прокидывания props через все уровни. Используется для глобального состояния.",
        difficulty: "medium"
      },
      {
        id: "react-8",
        question: "В чем разница между useMemo и useCallback?",
        answer: "useMemo мемоизирует результат вычислений, useCallback мемоизирует саму функцию. Оба используются для оптимизации производительности.",
        difficulty: "hard"
      },
      {
        id: "react-9",
        question: "Что такое reconciliation в React?",
        answer: "Reconciliation — процесс сравнения нового Virtual DOM с предыдущим и определения минимальных изменений для обновления реального DOM.",
        difficulty: "hard"
      },
      {
        id: "react-10",
        question: "Объясните useReducer хук",
        answer: "useReducer — альтернатива useState для сложного состояния. Принимает reducer функцию и начальное состояние, возвращает текущее состояние и dispatch функцию.",
        difficulty: "medium"
      },
      {
        id: "react-11",
        question: "Что такое HOC (Higher-Order Components)?",
        answer: "HOC — функция, которая принимает компонент и возвращает новый компонент с дополнительными свойствами или поведением.",
        difficulty: "hard"
      },
      {
        id: "react-12",
        question: "Объясните render props паттерн",
        answer: "Render props — техника совместного использования кода между компонентами с помощью prop, значение которого является функцией.",
        difficulty: "hard"
      },
      {
        id: "react-13",
        question: "Что такое React.memo?",
        answer: "React.memo — HOC для мемоизации функциональных компонентов. Предотвращает ненужные перерендеры, если props не изменились.",
        difficulty: "medium"
      },
      {
        id: "react-14",
        question: "Объясните useRef хук",
        answer: "useRef возвращает изменяемый ref объект, который сохраняет значение между рендерами. Используется для доступа к DOM элементам или хранения значений.",
        difficulty: "medium"
      },
      {
        id: "react-15",
        question: "Что такое Suspense в React?",
        answer: "Suspense позволяет компонентам 'ждать' что-то перед рендерингом, показывая fallback UI во время загрузки данных или кода.",
        difficulty: "hard"
      },
      {
        id: "react-16",
        question: "Объясните Error Boundaries",
        answer: "Error Boundaries — компоненты, которые перехватывают JavaScript ошибки в дереве компонентов и отображают fallback UI вместо краха приложения.",
        difficulty: "hard"
      },
      {
        id: "react-17",
        question: "Что такое React Fiber?",
        answer: "React Fiber — новая архитектура reconciler в React 16+, позволяющая прерывать, приостанавливать и возобновлять работу для лучшей производительности.",
        difficulty: "hard"
      },
      {
        id: "react-18",
        question: "Объясните Concurrent Features в React 18",
        answer: "Concurrent Features включают автоматический батчинг, Suspense для SSR, useTransition и useDeferredValue для оптимизации производительности.",
        difficulty: "hard"
      },
      {
        id: "react-19",
        question: "Что такое React Server Components?",
        answer: "Server Components рендерятся на сервере, позволяя уменьшить размер бандла и улучшить производительность за счет серверного рендеринга части компонентов.",
        difficulty: "hard"
      },
      {
        id: "react-20",
        question: "Объясните useLayoutEffect",
        answer: "useLayoutEffect работает синхронно после всех DOM мутаций, но до отрисовки браузером. Используется для измерений DOM и предотвращения мерцания.",
        difficulty: "hard"
      }
    ]
  },
  {
    id: "typescript",
    name: "TypeScript",
    questions: [
      {
        id: "ts-1",
        question: "Что такое TypeScript и зачем он нужен?",
        answer: "TypeScript — это надмножество JavaScript, добавляющее статическую типизацию. Он помогает обнаруживать ошибки на этапе разработки и улучшает IntelliSense.",
        difficulty: "easy"
      },
      {
        id: "ts-2",
        question: "Объясните основные типы данных в TypeScript",
        answer: "Основные типы: number, string, boolean, array, tuple, enum, any, void, null, undefined, never, object.",
        difficulty: "easy"
      },
      {
        id: "ts-3",
        question: "Что такое интерфейсы в TypeScript?",
        answer: "Интерфейсы определяют структуру объектов, описывая какие свойства и методы должны быть у объекта. Они используются для типизации.",
        difficulty: "medium"
      },
      {
        id: "ts-4",
        question: "В чем разница между interface и type?",
        answer: "Interface может быть расширен и объединен, type более гибкий для union/intersection типов. Interface лучше для объектов, type для сложных типов.",
        difficulty: "medium"
      },
      {
        id: "ts-5",
        question: "Что такое дженерики (generics)?",
        answer: "Дженерики позволяют создавать переиспользуемые компоненты, работающие с различными типами, сохраняя типизацию: function identity<T>(arg: T): T",
        difficulty: "medium"
      },
      {
        id: "ts-6",
        question: "Объясните Union и Intersection типы",
        answer: "Union (A | B) означает 'либо A, либо B'. Intersection (A & B) означает 'и A, и B одновременно'.",
        difficulty: "medium"
      },
      {
        id: "ts-7",
        question: "Что такое Type Guards?",
        answer: "Type Guards — это функции или выражения, которые сужают тип в определенном блоке кода: typeof, instanceof, in оператор.",
        difficulty: "hard"
      },
      {
        id: "ts-8",
        question: "Объясните Mapped Types",
        answer: "Mapped Types создают новые типы, преобразуя каждое свойство существующего типа: type Readonly<T> = { readonly [P in keyof T]: T[P] }",
        difficulty: "hard"
      },
      {
        id: "ts-9",
        question: "Что такое Conditional Types?",
        answer: "Conditional Types позволяют создавать типы на основе условий: T extends U ? X : Y",
        difficulty: "hard"
      },
      {
        id: "ts-10",
        question: "Объясните keyof оператор",
        answer: "keyof создает union тип из всех ключей объектного типа: keyof { a: number, b: string } дает 'a' | 'b'",
        difficulty: "medium"
      },
      {
        id: "ts-11",
        question: "Что такое утилитарные типы (Utility Types)?",
        answer: "Встроенные типы для трансформации: Partial<T>, Required<T>, Pick<T,K>, Omit<T,K>, Record<K,T>, Exclude<T,U>, Extract<T,U>",
        difficulty: "medium"
      },
      {
        id: "ts-12",
        question: "Объясните декораторы в TypeScript",
        answer: "Декораторы — это метафункции, которые могут изменять классы, методы, свойства или параметры во время объявления.",
        difficulty: "hard"
      },
      {
        id: "ts-13",
        question: "Что такое модули в TypeScript?",
        answer: "Модули организуют код в отдельные файлы с помощью export/import. TypeScript поддерживает CommonJS, AMD, ES6 модули.",
        difficulty: "medium"
      },
      {
        id: "ts-14",
        question: "Объясните namespace в TypeScript",
        answer: "Namespace группирует связанный код в именованные области видимости, предотвращая конфликты имен в глобальной области.",
        difficulty: "medium"
      },
      {
        id: "ts-15",
        question: "Что такое Declaration Merging?",
        answer: "Declaration Merging позволяет объединять несколько объявлений с одинаковым именем в одно определение.",
        difficulty: "hard"
      },
      {
        id: "ts-16",
        question: "Объясните Template Literal Types",
        answer: "Template Literal Types создают новые строковые типы на основе шаблонных строк: type Greeting = `hello ${string}`",
        difficulty: "hard"
      },
      {
        id: "ts-17",
        question: "Что такое Nominal Typing vs Structural Typing?",
        answer: "TypeScript использует structural typing (совместимость по структуре), в отличие от nominal typing (совместимость по имени типа).",
        difficulty: "hard"
      },
      {
        id: "ts-18",
        question: "Объясните const assertions",
        answer: "Const assertions (as const) делают типы более точными, превращая массивы в readonly tuples, а объекты в readonly.",
        difficulty: "medium"
      },
      {
        id: "ts-19",
        question: "Что такое Abstract Classes?",
        answer: "Abstract классы не могут быть инстанцированы напрямую и могут содержать абстрактные методы, которые должны быть реализованы в наследниках.",
        difficulty: "medium"
      },
      {
        id: "ts-20",
        question: "Объясните Variance в TypeScript",
        answer: "Variance определяет как наследование типов влияет на их совместимость: covariance (T<A> <: T<B> если A <: B), contravariance (обратное).",
        difficulty: "hard"
      }
    ]
  },
  {
    id: "nodejs",
    name: "Node.js",
    questions: [
      {
        id: "node-1",
        question: "Что такое Node.js?",
        answer: "Node.js — это серверная платформа, построенная на движке V8, позволяющая выполнять JavaScript код вне браузера для создания серверных приложений.",
        difficulty: "easy"
      },
      {
        id: "node-2",
        question: "Объясните Event Loop в Node.js",
        answer: "Event Loop обрабатывает асинхронные операции в Node.js, используя фазы: timers, pending callbacks, idle/prepare, poll, check, close callbacks.",
        difficulty: "hard"
      },
      {
        id: "node-3",
        question: "Что такое npm?",
        answer: "npm (Node Package Manager) — это пакетный менеджер для Node.js, позволяющий устанавливать, управлять и публиковать JavaScript пакеты.",
        difficulty: "easy"
      },
      {
        id: "node-4",
        question: "В чем разница между require() и import?",
        answer: "require() — CommonJS синтаксис, синхронный, работает во время выполнения. import — ES6 модули, поддерживает tree-shaking, статический анализ.",
        difficulty: "medium"
      },
      {
        id: "node-5",
        question: "Что такое middleware в Express.js?",
        answer: "Middleware — функции, которые выполняются между запросом и ответом, имеют доступ к req, res объектам и next() функции для передачи управления.",
        difficulty: "medium"
      },
      {
        id: "node-6",
        question: "Объясните streams в Node.js",
        answer: "Streams позволяют читать/записывать данные по частям: Readable (чтение), Writable (запись), Duplex (чтение+запись), Transform (преобразование).",
        difficulty: "hard"
      },
      {
        id: "node-7",
        question: "Что такое Buffer в Node.js?",
        answer: "Buffer — это глобальный класс для работы с бинарными данными в Node.js, представляет фиксированный размер памяти вне V8 heap.",
        difficulty: "medium"
      },
      {
        id: "node-8",
        question: "Объясните процесс child_process",
        answer: "child_process модуль позволяет создавать дочерние процессы: spawn(), exec(), execFile(), fork() для выполнения внешних команд.",
        difficulty: "hard"
      },
      {
        id: "node-9",
        question: "Что такое cluster в Node.js?",
        answer: "Cluster модуль позволяет создавать дочерние процессы, разделяющие серверные порты, для использования всех CPU ядер.",
        difficulty: "hard"
      },
      {
        id: "node-10",
        question: "Объясните callback, Promise и async/await",
        answer: "Callback — функция обратного вызова. Promise — объект для асинхронных операций. async/await — синтаксический сахар для Promise.",
        difficulty: "medium"
      },
      {
        id: "node-11",
        question: "Что такое worker_threads в Node.js?",
        answer: "Worker threads позволяют выполнять JavaScript код в параллельных потоках, полезно для CPU-интенсивных задач.",
        difficulty: "hard"
      },
      {
        id: "node-12",
        question: "Объясните process объект",
        answer: "process — глобальный объект, предоставляющий информацию о текущем Node.js процессе: argv, env, exit(), cwd(), platform.",
        difficulty: "medium"
      },
      {
        id: "node-13",
        question: "Что такое REPL в Node.js?",
        answer: "REPL (Read-Eval-Print Loop) — интерактивная оболочка для выполнения JavaScript команд в реальном времени.",
        difficulty: "easy"
      },
      {
        id: "node-14",
        question: "Объясните разницу между process.nextTick() и setImmediate()",
        answer: "process.nextTick() выполняется в начале следующей итерации Event Loop, setImmediate() — в check фазе текущей итерации.",
        difficulty: "hard"
      },
      {
        id: "node-15",
        question: "Что такое libuv?",
        answer: "libuv — C библиотека, обеспечивающая асинхронный I/O в Node.js через Event Loop, thread pool и работу с файловой системой.",
        difficulty: "hard"
      },
      {
        id: "node-16",
        question: "Объясните модуль fs",
        answer: "fs модуль предоставляет API для работы с файловой системой: readFile(), writeFile(), mkdir(), stat() и их синхронные версии.",
        difficulty: "medium"
      },
      {
        id: "node-17",
        question: "Что такое CommonJS?",
        answer: "CommonJS — стандарт модульной системы для JavaScript, использующий require() для импорта и module.exports для экспорта.",
        difficulty: "medium"
      },
      {
        id: "node-18",
        question: "Объясните http модуль",
        answer: "http модуль позволяет создавать HTTP серверы и клиенты: createServer(), request(), response объекты для обработки запросов.",
        difficulty: "medium"
      },
      {
        id: "node-19",
        question: "Что такое package.json?",
        answer: "package.json — файл конфигурации проекта, содержащий метаданные: название, версию, зависимости, скрипты, точку входа.",
        difficulty: "easy"
      },
      {
        id: "node-20",
        question: "Объясните память и garbage collection в Node.js",
        answer: "Node.js использует V8 garbage collector: young generation (Scavenge), old generation (Mark-Sweep-Compact), память делится на heap и stack.",
        difficulty: "hard"
      },
      {
        id: "node-21",
        question: "Что такое PM2 и зачем он нужен?",
        answer: "PM2 — это менеджер процессов для Node.js приложений, обеспечивающий балансировку нагрузки, автоматический перезапуск, логирование и мониторинг.",
        difficulty: "medium"
      },
      {
        id: "node-22",
        question: "Объясните разницу между process.env и dotenv",
        answer: "process.env — глобальный объект с переменными окружения. dotenv — пакет для загрузки переменных из .env файла в process.env.",
        difficulty: "easy"
      },
      {
        id: "node-23",
        question: "Что такое JWT и как его использовать в Node.js?",
        answer: "JWT (JSON Web Token) — стандарт для создания токенов доступа. В Node.js используется для аутентификации через jsonwebtoken пакет.",
        difficulty: "medium"
      },
      {
        id: "node-24",
        question: "Объясните паттерн Repository в Node.js",
        answer: "Repository паттерн абстрагирует доступ к данным, инкапсулируя логику работы с базой данных в отдельном слое.",
        difficulty: "hard"
      },
      {
        id: "node-25",
        question: "Что такое Rate Limiting и как его реализовать?",
        answer: "Rate Limiting ограничивает количество запросов от клиента. Реализуется через middleware с использованием Redis или in-memory хранилища.",
        difficulty: "medium"
      }
    ]
  },
  {
    id: "database",
    name: "Базы данных",
    questions: [
      {
        id: "db-1",
        question: "В чем разница между SQL и NoSQL базами данных?",
        answer: "SQL — реляционные БД с фиксированной схемой и ACID. NoSQL — нереляционные БД с гибкой схемой, высокой производительностью и масштабируемостью.",
        difficulty: "medium"
      },
      {
        id: "db-2",
        question: "Что такое индексы в базах данных?",
        answer: "Индексы — структуры данных, ускоряющие поиск записей. Улучшают производительность SELECT, но замедляют INSERT/UPDATE/DELETE.",
        difficulty: "medium"
      },
      {
        id: "db-3",
        question: "Объясните нормализацию баз данных",
        answer: "Нормализация — процесс организации данных для минимизации избыточности: 1NF (атомарность), 2NF (зависимость от ключа), 3NF (транзитивная зависимость).",
        difficulty: "hard"
      },
      {
        id: "db-4",
        question: "Что такое транзакции и ACID?",
        answer: "ACID: Atomicity (атомарность), Consistency (согласованность), Isolation (изоляция), Durability (долговечность). Транзакции обеспечивают целостность данных.",
        difficulty: "medium"
      },
      {
        id: "db-5",
        question: "Объясните разницу между MongoDB и PostgreSQL",
        answer: "MongoDB — документоориентированная NoSQL БД, гибкая схема. PostgreSQL — реляционная SQL БД с поддержкой JSON и сложных запросов.",
        difficulty: "medium"
      },
      {
        id: "db-6",
        question: "Что такое Redis и когда его использовать?",
        answer: "Redis — in-memory хранилище данных типа ключ-значение. Используется для кэширования, сессий, очередей, pub/sub.",
        difficulty: "medium"
      },
      {
        id: "db-7",
        question: "Объясните шардирование баз данных",
        answer: "Шардирование — горизонтальное разделение данных между несколькими серверами для масштабирования и распределения нагрузки.",
        difficulty: "hard"
      },
      {
        id: "db-8",
        question: "Что такое репликация в базах данных?",
        answer: "Репликация — копирование данных между серверами для отказоустойчивости, балансировки нагрузки и географического распределения.",
        difficulty: "medium"
      },
      {
        id: "db-9",
        question: "Объясните разницу между LEFT, RIGHT и INNER JOIN",
        answer: "INNER JOIN — только совпадающие записи. LEFT JOIN — все записи из левой таблицы. RIGHT JOIN — все записи из правой таблицы.",
        difficulty: "medium"
      },
      {
        id: "db-10",
        question: "Что такое ORM и зачем он нужен?",
        answer: "ORM (Object-Relational Mapping) — технология для работы с БД через объекты. Примеры: Sequelize, TypeORM, Mongoose.",
        difficulty: "medium"
      }
    ]
  },
  {
    id: "sql",
    name: "SQL",
    questions: [
      {
        id: "sql-1",
        question: "Что такое SQL и какие основные команды он включает?",
        answer: "SQL (Structured Query Language) — язык для работы с реляционными базами данных. Основные команды: SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP.",
        difficulty: "easy"
      },
      {
        id: "sql-2",
        question: "Объясните разницу между INNER JOIN и LEFT JOIN",
        answer: "INNER JOIN возвращает только совпадающие записи из обеих таблиц. LEFT JOIN возвращает все записи из левой таблицы и совпадающие из правой.",
        difficulty: "medium"
      },
      {
        id: "sql-3",
        question: "Что такое индексы в SQL?",
        answer: "Индексы — структуры данных, ускоряющие поиск записей. Улучшают производительность SELECT, но замедляют INSERT/UPDATE/DELETE.",
        difficulty: "medium"
      },
      {
        id: "sql-4",
        question: "Объясните нормализацию баз данных",
        answer: "Нормализация — процесс организации данных для минимизации избыточности: 1NF (атомарность), 2NF (зависимость от ключа), 3NF (транзитивная зависимость).",
        difficulty: "hard"
      },
      {
        id: "sql-5",
        question: "Что такое транзакции и ACID?",
        answer: "ACID: Atomicity (атомарность), Consistency (согласованность), Isolation (изоляция), Durability (долговечность). Транзакции обеспечивают целостность данных.",
        difficulty: "medium"
      },
      {
        id: "sql-6",
        question: "Как работает GROUP BY?",
        answer: "GROUP BY группирует строки по указанным столбцам. Используется с агрегатными функциями (COUNT, SUM, AVG, MAX, MIN).",
        difficulty: "medium"
      },
      {
        id: "sql-7",
        question: "Что такое подзапросы (subqueries)?",
        answer: "Подзапросы — запросы внутри других запросов. Могут быть в WHERE, FROM, SELECT. Используются для сложной фильтрации и агрегации.",
        difficulty: "medium"
      },
      {
        id: "sql-8",
        question: "Объясните разницу между HAVING и WHERE",
        answer: "WHERE фильтрует строки до группировки, HAVING — после. HAVING используется с GROUP BY для фильтрации групп.",
        difficulty: "medium"
      },
      {
        id: "sql-9",
        question: "Что такое оконные функции?",
        answer: "Оконные функции выполняют вычисления над набором строк: ROW_NUMBER(), RANK(), DENSE_RANK(), LAG(), LEAD(). Используют OVER().",
        difficulty: "hard"
      },
      {
        id: "sql-10",
        question: "Как работает UNION?",
        answer: "UNION объединяет результаты нескольких SELECT запросов. Удаляет дубликаты. UNION ALL сохраняет дубликаты.",
        difficulty: "medium"
      },
      {
        id: "sql-11",
        question: "Что такое внешние ключи (foreign keys)?",
        answer: "Внешние ключи обеспечивают ссылочную целостность между таблицами. Создаются через FOREIGN KEY CONSTRAINT.",
        difficulty: "medium"
      },
      {
        id: "sql-12",
        question: "Объясните разницу между DELETE и TRUNCATE",
        answer: "DELETE удаляет строки с возможностью отката. TRUNCATE удаляет все строки без возможности отката, сбрасывает автоинкремент.",
        difficulty: "medium"
      },
      {
        id: "sql-13",
        question: "Что такое представления (views)?",
        answer: "Представления — виртуальные таблицы на основе SELECT запроса. Упрощают сложные запросы, обеспечивают безопасность данных.",
        difficulty: "medium"
      },
      {
        id: "sql-14",
        question: "Как работает EXISTS?",
        answer: "EXISTS проверяет наличие записей в подзапросе. Возвращает TRUE, если подзапрос возвращает хотя бы одну строку.",
        difficulty: "medium"
      },
      {
        id: "sql-15",
        question: "Что такое хранимые процедуры?",
        answer: "Хранимые процедуры — набор SQL команд, сохраненных в базе данных. Улучшают производительность, безопасность, переиспользуемость кода.",
        difficulty: "hard"
      },
      {
        id: "sql-16",
        question: "Объясните разницу между CHAR и VARCHAR",
        answer: "CHAR имеет фиксированную длину, дополняется пробелами. VARCHAR имеет переменную длину, занимает только необходимое пространство.",
        difficulty: "easy"
      },
      {
        id: "sql-17",
        question: "Что такое триггеры?",
        answer: "Триггеры — процедуры, автоматически выполняемые при определенных событиях (INSERT, UPDATE, DELETE).",
        difficulty: "hard"
      },
      {
        id: "sql-18",
        question: "Как работает CASE в SQL?",
        answer: "CASE — условный оператор: CASE WHEN condition THEN result ELSE default END. Используется для условной логики в запросах.",
        difficulty: "medium"
      },
      {
        id: "sql-19",
        question: "Что такое CTE (Common Table Expressions)?",
        answer: "CTE — временные результаты запроса, доступные в рамках одного запроса. Создаются через WITH. Улучшают читаемость сложных запросов.",
        difficulty: "hard"
      },
      {
        id: "sql-20",
        question: "Объясните разницу между IN и EXISTS",
        answer: "IN проверяет наличие значения в списке. EXISTS проверяет наличие записей в подзапросе. EXISTS обычно эффективнее для больших наборов данных.",
        difficulty: "medium"
      },
      {
        id: "sql-21",
        question: "Что такое партиционирование таблиц?",
        answer: "Партиционирование — разделение таблицы на логические части. Улучшает производительность запросов и управление данными.",
        difficulty: "hard"
      },
      {
        id: "sql-22",
        question: "Как работает FULL OUTER JOIN?",
        answer: "FULL OUTER JOIN возвращает все записи из обеих таблиц. Если нет совпадения, заполняет NULL. Эквивалентен UNION LEFT и RIGHT JOIN.",
        difficulty: "medium"
      }
    ]
  },
  {
    id: "testing",
    name: "Тестирование",
    questions: [
      {
        id: "test-1",
        question: "В чем разница между unit, integration и e2e тестами?",
        answer: "Unit тесты проверяют отдельные компоненты. Integration тесты проверяют взаимодействие компонентов. E2E тесты проверяют весь процесс от начала до конца.",
        difficulty: "medium"
      },
      {
        id: "test-2",
        question: "Что такое TDD и BDD?",
        answer: "TDD (Test-Driven Development) — разработка через тестирование. BDD (Behavior-Driven Development) — разработка через описание поведения.",
        difficulty: "medium"
      },
      {
        id: "test-3",
        question: "Объясните моки и стабы в тестировании",
        answer: "Моки — объекты, имитирующие поведение реальных объектов. Стабы — объекты, возвращающие предопределенные ответы.",
        difficulty: "medium"
      },
      {
        id: "test-4",
        question: "Что такое Jest и как его использовать?",
        answer: "Jest — фреймворк для тестирования JavaScript. Поддерживает моки, снапшоты, асинхронное тестирование и покрытие кода.",
        difficulty: "medium"
      },
      {
        id: "test-5",
        question: "Объясните тестирование асинхронного кода",
        answer: "Асинхронное тестирование использует async/await, done callback или возврат Promise. Важно правильно обрабатывать таймауты и ошибки.",
        difficulty: "hard"
      },
      {
        id: "test-6",
        question: "Что такое CI/CD и как его настроить?",
        answer: "CI (Continuous Integration) — автоматическая сборка и тестирование. CD (Continuous Deployment) — автоматический деплой. Настраивается через GitHub Actions, Jenkins, GitLab CI.",
        difficulty: "medium"
      },
      {
        id: "test-7",
        question: "Объясните тестирование React компонентов",
        answer: "React компоненты тестируются с помощью React Testing Library и Jest. Проверяются рендеринг, события, состояние и пропсы.",
        difficulty: "medium"
      },
      {
        id: "test-8",
        question: "Что такое snapshot тестирование?",
        answer: "Snapshot тестирование сохраняет результат рендеринга компонента и сравнивает его с предыдущими версиями при следующих тестах.",
        difficulty: "medium"
      },
      {
        id: "test-9",
        question: "Объясните тестирование API",
        answer: "API тестирование проверяет эндпоинты, статусы, заголовки, тело ответа. Используются инструменты: Postman, Supertest, Jest.",
        difficulty: "medium"
      },
      {
        id: "test-10",
        question: "Что такое performance тестирование?",
        answer: "Performance тестирование проверяет скорость, отзывчивость, стабильность и масштабируемость приложения под нагрузкой.",
        difficulty: "hard"
      }
    ]
  },
  {
    id: "security",
    name: "Безопасность",
    questions: [
      {
        id: "sec-1",
        question: "Что такое XSS и как его предотвратить?",
        answer: "XSS (Cross-Site Scripting) — внедрение вредоносного кода. Предотвращается через экранирование, CSP, HttpOnly cookies, Content-Type.",
        difficulty: "medium"
      },
      {
        id: "sec-2",
        question: "Объясните CSRF атаки",
        answer: "CSRF (Cross-Site Request Forgery) — выполнение действий от имени пользователя. Предотвращается через CSRF токены, SameSite cookies.",
        difficulty: "medium"
      },
      {
        id: "sec-3",
        question: "Что такое SQL инъекции?",
        answer: "SQL инъекции — внедрение SQL кода через пользовательский ввод. Предотвращается через параметризованные запросы, ORM, валидацию.",
        difficulty: "medium"
      },
      {
        id: "sec-4",
        question: "Объясните OAuth 2.0",
        answer: "OAuth 2.0 — протокол авторизации. Использует токены доступа, refresh токены, разные гранты (authorization code, client credentials).",
        difficulty: "hard"
      },
      {
        id: "sec-5",
        question: "Что такое JWT и как его безопасно использовать?",
        answer: "JWT — токен для передачи данных. Безопасность обеспечивается через подпись, короткое время жизни, хранение в HttpOnly cookies.",
        difficulty: "medium"
      },
      {
        id: "sec-6",
        question: "Объясните HTTPS и SSL/TLS",
        answer: "HTTPS — защищенный HTTP через SSL/TLS. Обеспечивает шифрование, аутентификацию, целостность данных.",
        difficulty: "medium"
      },
      {
        id: "sec-7",
        question: "Что такое CORS и как его настроить?",
        answer: "CORS (Cross-Origin Resource Sharing) — механизм доступа к ресурсам с других доменов. Настраивается через заголовки Access-Control-*.",
        difficulty: "medium"
      },
      {
        id: "sec-8",
        question: "Объясните Content Security Policy",
        answer: "CSP — механизм безопасности, контролирующий ресурсы, которые может загружать страница. Предотвращает XSS, инъекции.",
        difficulty: "hard"
      },
      {
        id: "sec-9",
        question: "Что такое rate limiting?",
        answer: "Rate limiting ограничивает количество запросов от клиента. Защищает от DDoS, брутфорса, злоупотребления API.",
        difficulty: "medium"
      },
      {
        id: "sec-10",
        question: "Объясните безопасное хранение паролей",
        answer: "Пароли хешируются с солью через bcrypt, Argon2. Никогда не хранятся в открытом виде. Используется много итераций.",
        difficulty: "medium"
      }
    ]
  }
];

export const getTechnologyQuestions = (techId: string): Question[] => {
  const tech = questionsData.find(t => t.id === techId);
  return tech ? tech.questions : [];
};

export const getAllQuestions = (): Question[] => {
  return questionsData.flatMap(tech => tech.questions);
};
