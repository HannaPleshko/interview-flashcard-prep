import React, { useState, useRef } from 'react';
import { Check, X, Copy, ChevronDown, ChevronUp, Plus, Minus } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuCheckboxItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

const FLAG_OPTIONS = [
  { flag: 'g', label: 'g', description: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫' },
  { flag: 'i', label: 'i', description: '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä' },
  { flag: 'm', label: 'm', description: '–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–∂–∏–º' },
  { flag: 's', label: 's', description: '–¢–æ—á–∫–∞ (.) –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç \n' },
  { flag: 'u', label: 'u', description: 'Unicode —Ä–µ–∂–∏–º' },
  { flag: 'y', label: 'y', description: '–ü–æ–∏—Å–∫ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ (sticky)' },
];

const REGEX_CHEAT_SHEET = [
  {
    title: '–§–ª–∞–≥–∏',
    items: [
      { 
        pattern: 'g', 
        description: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫',
        example: '/hello/g - –Ω–∞–π–¥–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è "hello"',
        usage: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ'
      },
      { 
        pattern: 'i', 
        description: '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞',
        example: '/hello/i - –Ω–∞–π–¥–µ—Ç "hello", "Hello", "HELLO"',
        usage: '–ö–æ–≥–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è'
      },
      { 
        pattern: 'm', 
        description: '–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–∂–∏–º',
        example: '/^hello/m - –Ω–∞–π–¥–µ—Ç "hello" –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏',
        usage: '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏'
      },
      { 
        pattern: 's', 
        description: '–¢–æ—á–∫–∞ (.) –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç \n',
        example: '/hello.world/s - –Ω–∞–π–¥–µ—Ç "hello\nworld"',
        usage: '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —Ç–æ—á–∫–∞ (.) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ —Ç–∞–∫–∂–µ —Å–∏–º–≤–æ–ª—É –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'
      },
      { 
        pattern: 'u', 
        description: 'Unicode —Ä–µ–∂–∏–º',
        example: '/\\u{1F600}/u - –Ω–∞–π–¥–µ—Ç —ç–º–æ–¥–∑–∏ üòÄ',
        usage: '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏'
      },
      { 
        pattern: 'y', 
        description: '–ü–æ–∏—Å–∫ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ (sticky)',
        example: '/hello/y - –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏',
        usage: '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏'
      },
    ]
  },
  {
    title: '–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã',
    items: [
      { 
        pattern: '.', 
        description: '–õ—é–±–æ–π —Å–∏–º–≤–æ–ª, –∫—Ä–æ–º–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏',
        example: 'a.c - –Ω–∞–π–¥–µ—Ç "abc", "a1c", "a#c"',
        usage: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –º–µ–∂–¥—É –¥–≤—É–º—è –±—É–∫–≤–∞–º–∏'
      },
      { 
        pattern: '\\d', 
        description: '–¶–∏—Ñ—Ä–∞ [0-9]',
        example: '\\d{3} - –Ω–∞–π–¥–µ—Ç "123", "456", "789"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Ü–∏—Ñ—Ä'
      },
      { 
        pattern: '\\D', 
        description: '–ù–µ —Ü–∏—Ñ—Ä–∞ [^0-9]',
        example: '\\D+ - –Ω–∞–π–¥–µ—Ç "abc", "!@#", "hello"',
        usage: '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä'
      },
      { 
        pattern: '\\w', 
        description: '–ë—É–∫–≤–∞, —Ü–∏—Ñ—Ä–∞ –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ',
        example: '\\w+ - –Ω–∞–π–¥–µ—Ç "hello", "user123", "my_name"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤'
      },
      { 
        pattern: '\\W', 
        description: '–ù–µ –±—É–∫–≤–∞, –Ω–µ —Ü–∏—Ñ—Ä–∞, –Ω–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ',
        example: '\\W+ - –Ω–∞–π–¥–µ—Ç "!@#", " ", "..."',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤'
      },
      { 
        pattern: '\\s', 
        description: '–ü—Ä–æ–±–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª',
        example: 'hello\\s+world - –Ω–∞–π–¥–µ—Ç "hello world", "hello  world"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏'
      },
      { 
        pattern: '\\S', 
        description: '–ù–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª',
        example: '\\S+ - –Ω–∞–π–¥–µ—Ç "hello", "123", "!@#"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤'
      },
      { 
        pattern: '|', 
        description: '–ò–õ–ò (–Ω–∞–ø—Ä–∏–º–µ—Ä: a|b)',
        example: 'cat|dog - –Ω–∞–π–¥–µ—Ç "cat" –∏–ª–∏ "dog"',
        usage: '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ–¥–Ω–æ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤'
      },
    ]
  },
  {
    title: '–ö–≤–∞–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã',
    items: [
      { 
        pattern: '*', 
        description: '0 –∏–ª–∏ –±–æ–ª–µ–µ',
        example: 'a* - –Ω–∞–π–¥–µ—Ç "", "a", "aa", "aaa"',
        usage: '–ö–æ–≥–¥–∞ —Å–∏–º–≤–æ–ª –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å'
      },
      { 
        pattern: '+', 
        description: '1 –∏–ª–∏ –±–æ–ª–µ–µ',
        example: '\\d+ - –Ω–∞–π–¥–µ—Ç "1", "123", "456789"',
        usage: '–ö–æ–≥–¥–∞ —Å–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑'
      },
      { 
        pattern: '?', 
        description: '0 –∏–ª–∏ 1',
        example: 'colou?r - –Ω–∞–π–¥–µ—Ç "color" –∏ "colour"',
        usage: '–î–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤'
      },
      { 
        pattern: '{n}', 
        description: '–†–æ–≤–Ω–æ n —Ä–∞–∑',
        example: '\\d{4} - –Ω–∞–π–¥–µ—Ç "1234", "5678"',
        usage: '–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π'
      },
      { 
        pattern: '{n,}', 
        description: 'n –∏–ª–∏ –±–æ–ª–µ–µ —Ä–∞–∑',
        example: '\\d{3,} - –Ω–∞–π–¥–µ—Ç "123", "1234", "12345"',
        usage: '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º n –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π'
      },
      { 
        pattern: '{n,m}', 
        description: '–û—Ç n –¥–æ m —Ä–∞–∑',
        example: '\\d{2,4} - –Ω–∞–π–¥–µ—Ç "12", "123", "1234"',
        usage: '–î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π'
      },
    ]
  },
  {
    title: '–ì—Ä–∞–Ω–∏—Ü—ã –∏ –≥—Ä—É–ø–ø—ã',
    items: [
      { 
        pattern: '^', 
        description: '–ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏',
        example: '^hello - –Ω–∞–π–¥–µ—Ç "hello world", –Ω–æ –Ω–µ "say hello"',
        usage: '–ö–æ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'
      },
      { 
        pattern: '$', 
        description: '–ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏',
        example: 'world$ - –Ω–∞–π–¥–µ—Ç "hello world", –Ω–æ –Ω–µ "world hello"',
        usage: '–ö–æ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º'
      },
      { 
        pattern: '\\b', 
        description: '–ì—Ä–∞–Ω–∏—Ü–∞ —Å–ª–æ–≤–∞',
        example: '\\bcat\\b - –Ω–∞–π–¥–µ—Ç "cat", –Ω–æ –Ω–µ "catch" –∏–ª–∏ "scat"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª—ã—Ö —Å–ª–æ–≤'
      },
      { 
        pattern: '\\B', 
        description: '–ù–µ –≥—Ä–∞–Ω–∏—Ü–∞ —Å–ª–æ–≤–∞',
        example: '\\Bcat\\B - –Ω–∞–π–¥–µ—Ç "catch", –Ω–æ –Ω–µ "cat"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ —á–∞—Å—Ç–µ–π —Å–ª–æ–≤'
      },
      { 
        pattern: '(...)', 
        description: '–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –≥—Ä—É–ø–ø–∞',
        example: '(\\d{3})-(\\d{2}) - –Ω–∞–π–¥–µ—Ç "123-45" –∏ –∑–∞–ø–æ–º–Ω–∏—Ç "123" –∏ "45"',
        usage: '–î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–∞—Å—Ç–µ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è'
      },
      { 
        pattern: '(?:...)', 
        description: '–ù–µ–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –≥—Ä—É–ø–ø–∞',
        example: '(?:https?://)?(www\\.)?example\\.com',
        usage: '–î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –±–µ–∑ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
      },
      { 
        pattern: '\\1', 
        description: '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É',
        example: '(\\w+)\\s+\\1 - –Ω–∞–π–¥–µ—Ç "hello hello", "bye bye"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤'
      },
    ]
  },
  {
    title: '–ù–∞–±–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤',
    items: [
      { 
        pattern: '[abc]', 
        description: '–õ—é–±–æ–π –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ a, b –∏–ª–∏ c',
        example: '[abc]at - –Ω–∞–π–¥–µ—Ç "cat", "bat", "rat"',
        usage: '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤'
      },
      { 
        pattern: '[^abc]', 
        description: '–õ—é–±–æ–π —Å–∏–º–≤–æ–ª, –∫—Ä–æ–º–µ a, b –∏ c',
        example: '[^abc]at - –Ω–∞–π–¥–µ—Ç "rat", "hat", –Ω–æ –Ω–µ "cat"',
        usage: '–î–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤'
      },
      { 
        pattern: '[a-z]', 
        description: '–õ—é–±–æ–π —Å–∏–º–≤–æ–ª –æ—Ç a –¥–æ z',
        example: '[a-z]+ - –Ω–∞–π–¥–µ—Ç "hello", "world"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤'
      },
      { 
        pattern: '[A-Z]', 
        description: '–õ—é–±–æ–π —Å–∏–º–≤–æ–ª –æ—Ç A –¥–æ Z',
        example: '[A-Z][a-z]* - –Ω–∞–π–¥–µ—Ç "Hello", "World"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤'
      },
      { 
        pattern: '[0-9]', 
        description: '–õ—é–±–∞—è —Ü–∏—Ñ—Ä–∞',
        example: '[0-9]{3} - –Ω–∞–π–¥–µ—Ç "123", "456", "789"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ —Ü–∏—Ñ—Ä'
      },
      { 
        pattern: '[–∞-—è—ë]', 
        description: '–õ—é–±–∞—è —Ä—É—Å—Å–∫–∞—è –±—É–∫–≤–∞',
        example: '[–∞-—è—ë]+ - –Ω–∞–π–¥–µ—Ç "–ø—Ä–∏–≤–µ—Ç", "–º–∏—Ä"',
        usage: '–î–ª—è –ø–æ–∏—Å–∫–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤'
      },
    ]
  }
];

const COMMON_EXAMPLES = [
  { pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', description: 'Email' },
  { pattern: '^\\+?[1-9]\\d{10,14}$', description: '–¢–µ–ª–µ—Ñ–æ–Ω' },
  { pattern: '^\\d{4}-\\d{2}-\\d{2}$', description: '–î–∞—Ç–∞ (YYYY-MM-DD)' },
  { pattern: '^https?://[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&:/~+#-]*[\\w@?^=%&/~+#-])?$', description: 'URL' },
  { pattern: '^[–ê-–Ø–∞-—è–Å—ë\\s-]+$', description: '–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã' },
  { pattern: '^[A-Za-z]+$', description: '–¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã' },
  { pattern: '^\\d+$', description: '–¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞' },
  { pattern: '^[A-Za-z–ê-–Ø–∞-—è–Å—ë\\s]+$', description: '–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã' },
  { pattern: '^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$', description: '–ü–∞—Ä–æ–ª—å: –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤' },
  { pattern: '^<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\/>)$', description: 'HTML-—Ç–µ–≥' },
];

const Regex = () => {
  const [pattern, setPattern] = useState('');
  const [flags, setFlags] = useState('gm');
  const [testString, setTestString] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [copied, setCopied] = useState(false);
  const [isCheatSheetOpen, setIsCheatSheetOpen] = useState(true);
  const [expandedSections, setExpandedSections] = useState<number[]>([]);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const highlightRef = useRef<HTMLDivElement>(null);
  const [showExamples, setShowExamples] = useState(false);

  let isMatch = false;
  let matchRanges: { start: number; end: number }[] = [];
  try {
    const regex = new RegExp(pattern, flags);
    isMatch = pattern !== '' && regex.test(testString);
    if (pattern && testString && !error) {
      matchRanges = [];
      let m;
      if (flags.includes('g')) {
        const re = new RegExp(pattern, flags.replace('g', '') + 'g');
        while ((m = re.exec(testString)) !== null) {
          if (m[0].length === 0) break; // avoid infinite loop
          matchRanges.push({ start: m.index, end: m.index + m[0].length });
        }
      } else {
        m = regex.exec(testString);
        if (m && m[0].length > 0) {
          matchRanges.push({ start: m.index, end: m.index + m[0].length });
        }
      }
    }
    if (error) setError(null);
  } catch (err) {
    isMatch = false;
    if (!error) setError('–û—à–∏–±–∫–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏');
  }

  const handleCopy = () => {
    navigator.clipboard.writeText(`/${pattern}/${flags}`);
    setCopied(true);
    setTimeout(() => setCopied(false), 1000);
  };

  const handleFlagChange = (flag: string) => {
    setFlags((prev) => {
      if (prev.includes(flag)) {
        return prev.replace(flag, '');
      } else {
        return (prev + flag).split('').sort().join('');
      }
    });
  };

  const toggleSection = (index: number) => {
    setExpandedSections(prev => 
      prev.includes(index) 
        ? prev.filter(i => i !== index)
        : [...prev, index]
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-violet-50 via-purple-50 to-indigo-50 flex flex-col">
      <Header />
      <div className="container mx-auto px-4 py-8 flex-grow">
        <div className="flex flex-col sm:flex-row items-start sm:items-center sm:justify-between mb-4 gap-4">
          <div className="flex items-center gap-4">
            <div>
              <h1 className="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
              </h1>
              <p className="text-muted-foreground text-sm sm:text-base">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–∑—É—á–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π</p>
            </div>
          </div>
        </div>
        <div className="space-y-6">
          <div className="flex flex-col lg:flex-row gap-6 justify-between">
            <div className="w-full lg:w-[60%]">
              <div className="bg-white/70 backdrop-blur-sm rounded-2xl border border-white/20 shadow-lg p-4 sm:p-6">
                <div className="mb-4 relative">
                  {copied && (
                    <div className="absolute top-0 right-0 mt-0.10 text-green-500 text-xs bg-white/90 px-3 py-1 rounded shadow z-20 animate-fade-in">
                      –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!
                    </div>
                  )}
                  <label className="block text-sm font-medium text-gray-700 mb-2">–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ</label>
                  <div className="flex items-center gap-2 relative">
                    <span className="absolute left-3 text-gray-400 text-lg select-none">/</span>
                    <Input
                      value={pattern}
                      onChange={e => setPattern(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
                      className="font-mono pl-7 pr-20 text-sm sm:text-base h-10 sm:h-12"
                    />
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <span className="absolute right-12 text-green-700 font-mono text-sm sm:text-base select-none cursor-pointer hover:bg-green-100 rounded px-1 py-0.5 transition">
                          /{flags || <span className='text-gray-400'>-</span>}
                        </span>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end" className="w-56">
                        <DropdownMenuLabel>–§–ª–∞–≥–∏</DropdownMenuLabel>
                        <DropdownMenuSeparator />
                        {FLAG_OPTIONS.map(opt => (
                          <DropdownMenuCheckboxItem
                            key={opt.flag}
                            checked={flags.includes(opt.flag)}
                            onCheckedChange={() => handleFlagChange(opt.flag)}
                            className="flex items-center gap-2"
                          >
                            <span className="font-mono w-5 inline-block">{opt.label}</span>
                            <span className="text-xs text-gray-500">{opt.description}</span>
                          </DropdownMenuCheckboxItem>
                        ))}
                      </DropdownMenuContent>
                    </DropdownMenu>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={handleCopy}
                      className="text-gray-400 hover:text-blue-600 absolute right-2 top-1/2 -translate-y-1/2 z-10"
                      type="button"
                    >
                      <Copy className="h-4 w-4 sm:h-5 sm:w-5" />
                    </Button>
                  </div>
                  {error && <div className="text-red-500 text-sm mt-2">{error}</div>}
                </div>
                <div className="flex items-center justify-between mb-2">
                  <label className="block text-sm font-medium text-gray-700">–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞</label>
                  {pattern && !error ? (
                    isMatch ? (
                      <span className="flex items-center gap-1 text-green-600 font-semibold text-xs sm:text-sm">
                        <Check className="h-3 w-3 sm:h-4 sm:w-4" /> —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                      </span>
                    ) : (
                      <span className="flex items-center gap-1 text-gray-500 font-semibold text-xs sm:text-sm">
                        <X className="h-3 w-3 sm:h-4 sm:w-4" /> –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                      </span>
                    )
                  ) : null}
                </div>
                <div className="relative w-full">
                  <div
                    ref={highlightRef}
                    aria-hidden
                    className="pointer-events-none absolute inset-0 whitespace-pre-wrap break-words rounded-lg p-3 text-sm sm:text-base min-h-[120px] sm:min-h-[180px] max-h-[300px] sm:max-h-[400px] bg-transparent"
                    style={{ zIndex: 1, fontFamily: 'inherit', color: 'inherit', lineHeight: 'inherit' }}
                  >
                    {(() => {
                      if (!pattern || !testString || error || matchRanges.length === 0) {
                        return <span className="text-gray-400">{testString || ''}</span>;
                      }
                      let last = 0;
                      const out = [];
                      matchRanges.forEach((range, i) => {
                        if (last < range.start) {
                          out.push(
                            <span key={last + '-n'}>{testString.slice(last, range.start)}</span>
                          );
                        }
                        out.push(
                          <span key={range.start + '-m'} className="bg-blue-200 text-blue-900 rounded px-0.5">
                            {testString.slice(range.start, range.end)}
                          </span>
                        );
                        last = range.end;
                      });
                      if (last < testString.length) {
                        out.push(<span key={last + '-end'}>{testString.slice(last)}</span>);
                      }
                      return out;
                    })()}
                  </div>
                  <textarea
                    ref={textareaRef}
                    value={testString}
                    onChange={e => setTestString(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    className="w-full min-h-[120px] sm:min-h-[180px] max-h-[300px] sm:max-h-[400px] text-sm sm:text-base rounded-lg border border-gray-200 bg-transparent p-3 focus:outline-none focus:ring-2 focus:ring-blue-200 resize-vertical shadow-sm relative z-10 text-transparent caret-blue-700"
                    style={{ position: 'relative', background: 'transparent', fontFamily: 'inherit', color: 'transparent', lineHeight: 'inherit' }}
                    spellCheck={false}
                    autoCorrect="off"
                    onScroll={e => {
                      if (highlightRef.current) {
                        highlightRef.current.scrollTop = (e.target as HTMLTextAreaElement).scrollTop;
                        highlightRef.current.scrollLeft = (e.target as HTMLTextAreaElement).scrollLeft;
                      }
                    }}
                  />
                </div>
                <h3 className="text-sm font-medium text-gray-700 mb-2 mt-4 flex items-center gap-2 cursor-pointer select-none" onClick={() => setShowExamples(v => !v)}>
                  <span>–ß–∞—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã</span>
                  {showExamples ? <ChevronUp className="h-4 w-4 text-gray-500" /> : <ChevronDown className="h-4 w-4 text-gray-500" />}
                </h3>
                {showExamples && (
                  <div className="flex flex-wrap gap-2 mb-4">
                    {COMMON_EXAMPLES.map((example, index) => (
                      <button
                        key={index}
                        onClick={() => setPattern(example.pattern)}
                        className="flex items-center gap-2 px-2 sm:px-3 py-1 sm:py-1.5 bg-gray-50 hover:bg-gray-100 rounded-lg text-xs sm:text-sm transition-colors group"
                        style={{ boxShadow: 'none', border: 'none' }}
                      >
                        <code className="font-mono text-[10px] sm:text-xs bg-gray-100 px-1 sm:px-1.5 py-0.5 rounded group-hover:bg-blue-50 group-hover:text-blue-600 transition-colors">
                          {example.pattern}
                        </code>
                        <span className="text-gray-600 text-[10px] sm:text-xs whitespace-nowrap">
                          {example.description}
                        </span>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
            <div className="w-full lg:w-[35%]">
              <div className="bg-white/70 backdrop-blur-sm rounded-2xl border border-white/20 shadow-lg p-4 sm:p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg sm:text-xl font-semibold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                    –®–ø–∞—Ä–≥–∞–ª–∫–∞
                  </h2>
                  <button
                    onClick={() => setIsCheatSheetOpen(!isCheatSheetOpen)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    {isCheatSheetOpen ? <ChevronUp className="h-4 w-4 sm:h-5 sm:w-5" /> : <ChevronDown className="h-4 w-4 sm:h-5 sm:w-5" />}
                  </button>
                </div>
                {isCheatSheetOpen && (
                  <div className="space-y-2">
                    {REGEX_CHEAT_SHEET.map((section, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg overflow-hidden">
                        <button
                          onClick={() => toggleSection(index)}
                          className="w-full flex items-center justify-between p-2 bg-gray-50 hover:bg-gray-100 transition-colors"
                        >
                          <span className="text-sm font-medium text-gray-700">{section.title}</span>
                          {expandedSections.includes(index) ? (
                            <Minus className="h-4 w-4 text-gray-500" />
                          ) : (
                            <Plus className="h-4 w-4 text-gray-500" />
                          )}
                        </button>
                        {expandedSections.includes(index) && (
                          <div className="p-2 space-y-1 bg-white">
                            {section.items.map((item, itemIndex) => (
                              <TooltipProvider key={itemIndex}>
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <button
                                      onClick={() => setPattern(item.pattern)}
                                      className="w-full flex items-center gap-2 p-1.5 hover:bg-gray-50 rounded text-left group"
                                    >
                                      <code className="font-mono text-xs sm:text-sm bg-gray-100 px-1.5 py-0.5 rounded group-hover:bg-blue-50 group-hover:text-blue-600 transition-colors">
                                        {item.pattern}
                                      </code>
                                      <span className="text-[10px] sm:text-xs text-gray-600 flex-grow truncate">
                                        {item.description}
                                      </span>
                                    </button>
                                  </TooltipTrigger>
                                  <TooltipContent className="max-w-[300px] p-3">
                                    <div className="space-y-2">
                                      <p className="font-medium">{item.description}</p>
                                      <div className="text-sm">
                                        <p className="text-blue-600 font-mono mb-1">{item.example}</p>
                                        <p className="text-gray-600">{item.usage}</p>
                                      </div>
                                    </div>
                                  </TooltipContent>
                                </Tooltip>
                              </TooltipProvider>
                            ))}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
        <div className="mt-6">
          <div className="bg-white/70 backdrop-blur-sm rounded-2xl border border-white/20 shadow-lg p-4 sm:p-6">
            <h2 className="text-lg sm:text-xl font-semibold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent mb-4">
              –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–ª–∞–≥–∞ g
            </h2>
            <div className="space-y-4">
              <div className="border border-gray-200 rounded-lg p-4">
                <h3 className="font-medium text-gray-900 mb-2">–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–µ</h3>
                <div className="bg-gray-50 rounded p-2">
                  <code className="text-sm font-mono text-blue-600">
                    const text = "–¶–µ–Ω–∞: 100, —Å–∫–∏–¥–∫–∞: 20, –∏—Ç–æ–≥–æ: 80";<br/>
                    const numbers = text.match(/\d+/g);<br/>
                    console.log(numbers); // ["100", "20", "80"]
                  </code>
                </div>
              </div>

              <div className="border border-gray-200 rounded-lg p-4">
                <h3 className="font-medium text-gray-900 mb-2">–ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π</h3>
                <div className="bg-gray-50 rounded p-2">
                  <code className="text-sm font-mono text-blue-600">
                    const text = "cat, cat, cat";<br/>
                    const newText = text.replace(/cat/g, "dog");<br/>
                    console.log(newText); // "dog, dog, dog"
                  </code>
                </div>
              </div>

              <div className="border border-gray-200 rounded-lg p-4">
                <h3 className="font-medium text-gray-900 mb-2">–ü–æ–∏—Å–∫ –≤—Å–µ—Ö email –∞–¥—Ä–µ—Å–æ–≤</h3>
                <div className="bg-gray-50 rounded p-2">
                  <code className="text-sm font-mono text-blue-600">
                    const text = "Email: test@test.com, support@test.com";<br/>
                    const emails = text.match(/[\w.-]+@[\w.-]+\.\w+/g);<br/>
                    console.log(emails); // ["test@test.com", "support@test.com"]
                  </code>
                </div>
              </div>

              <div className="border border-gray-200 rounded-lg p-4">
                <h3 className="font-medium text-gray-900 mb-2">–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ</h3>
                <div className="bg-gray-50 rounded p-2">
                  <code className="text-sm font-mono text-blue-600">
                    const text = "Hello World! How are you?";<br/>
                    const words = text.match(/\b\w+\b/g);<br/>
                    console.log(words); // ["Hello", "World", "How", "are", "you"]
                  </code>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default Regex; 